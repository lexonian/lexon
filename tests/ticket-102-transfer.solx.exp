// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

/** Lexon-generated Solidity code
 **
 **	code:        Ticket Machine
 **
 **	file:        cover/ticket-102-transfer.lex
 **
 **	compiler:    lexon 0.3 beta 2
 **
 **	grammar:     0.2.20 / subset 0.3.9 beta 1 - English / Reyes
 **
 **	backend:     solidity 0.3.102 beta 2
 **
 **	target:      solidity 0.8.17+
 **
 **	options:     --solidity  --all-auxiliaries 
 **


   INSTRUCTIONS FOR USE:

   Deploy this smart contract to the Ethereum blockchain or Goerli testchain.  Replace
   the <parameters> with literal values to interact with the contract via terminal.

   Note that the instructions below reflect your lexon code, as well as the parameters
   used during compilation of the code: different functions and parameters will result
   from different input.  Some functions are 'built-in' but only appear when needed as
   per compiler options used during compilation  –  a list of which, is available with
   lexon -h.  The functions are given in the order of appearance, in the lexon source.

   The required caller is noted in double angle brackets << >>.  Some functions can be
   called by anyone.  Note that roles are being defined by using an address for it for
   the first time. This will require for the same address to be used for the same role
   after this point. Else, the call will revert.

   Some clauses of the original lexon source text do not appear in the comments below.
   Namely, those without permission phrase, wherefore they are regarded as internal.

   These are the constructor parameters for deployment:

   <price : uint>

   These are the state progress functions that allow to interact with the contract:

   • <<admin>> ⟶   draw()

   The following are actions that can be performed per CLIENT.

   > client = ticket.add_client()
   • <<client>> ⟶   proof()
 */

/**
 **
 **	Main Ticket Machine contract system
 **
 **/

/*
 | 	LEX Ticket Machine
 | 
 | 	"Admin" is a person.
 | 	"Beneficial Party" is a person.
 | 	"Price" is an amount.
 | 
 | 	The Admin fixes the Price.
 */

contract TicketMachine {

    address payable public admin;
    address payable public beneficial_party;
    uint public price;


    constructor(uint _price) {
        admin = payable(msg.sender);
        price = _price;
    }

    /* aggregation of covenants for folds and serialization */

    mapping(uint => CLIENT) public _client_list;
    uint _client_count = 0;

    /* create new instance of CLIENT covenant, and register it with main */

    function add_client() public returns(CLIENT) {
        permit(client);
        return _client_list[_client_count += 1] = new CLIENT(this);
    }

    /* built-in caller assertion */

    function permit(address payable _authorized) internal view {
        require(msg.sender == _authorized, "not permitted");
    }

    /* built-in safe transfer */

    function transfer(address payable _to, uint _amount) internal {
        (bool _success, ) = _to.call{value:_amount}("");
        require(_success, "transfer failed on receiver side");
    }


    /* Draw clause */

    /*
     |  CLAUSE: Draw.
     |  The Admin may transfer the escrow to the Beneficial Party.
     */

    function draw() public {
        permit(admin);
        transfer(beneficial_party, address(this).balance);
    }
}

/**
 **
 **	CLIENT covenant class
 **
 **/

/*
 | 	TERMS PER CLIENT
 | 
 | 	"Client" is a person.
 | 
 | 	The Client pays the Price into escrow.
 */

contract CLIENT {

    TicketMachine main;
    address payable public client;


    event Message(
        address indexed _from,
        address indexed _to,
        string _message);


    constructor(TicketMachine _main) {
        main = _main;
        if(client == address(0x0)) client = payable(msg.sender);
    }


    /* Proof clause */

    /*
     |  CLAUSE: Proof.
     |  The Client may notify the Beneficial Party.
     */

    function proof() public {
        permit(client);
        notify(main.beneficial_party(), "NOTIFICATION");
    }

    /* built-in caller assertion */

    function permit(address payable _authorized) internal view {
        require(msg.sender == _authorized, "not permitted");
    }

    /* built-in send message */

    function notify(address payable _to, string memory _message) internal {
        emit Message(msg.sender, _to, _message);
    }
}

/* end */
