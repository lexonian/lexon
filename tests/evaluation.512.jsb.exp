module.exports = class EvaluationLicenseSystem {

    constructor(licensor, agent, licensing_fee, breach_fee) {

        let main = this;
        this._escrow = 0;
        this.licensor = licensor;
        this.agent = agent;
        this.licensing_fee = licensing_fee;
        this.breach_fee = breach_fee;


        this._license_list = {};
        this._license_count = 0;


        this.License = (caller, licensee, description_of_goods) => {
            if(caller == main.licensor) {
                return new License(caller, licensee, description_of_goods);
            }
        };

        class License {

            constructor(caller, licensee, description_of_goods) {
                this.description_of_goods = description_of_goods;
                this.licensee = licensee;
                this.paid = null;
                this.commissioned = null;
                this.comment_text = null;
                this.published = null;
                this.permission_to_comment = null;
                this.notice_time = null;
                    this.terminated = false;
            }


            pay(caller)  {
                if(this.already_terminated()) return undefined;
                if(!(caller == this.licensee)) return 'not permitted';
                if(caller == this.licensee) {
                    main.transfer(this.licensee, main.licensor, main.licensing_fee);
                    main.transfer(this.licensee, 'escrow', main.breach_fee);
                }
                this.paid = true;
            }


            commission(caller)  {
                if(this.already_terminated()) return undefined;
                if(caller != main.licensor) return 'not permitted';
                this.commissioned = true;
            }


            comment(caller, comment_text)  {
                if(this.already_terminated()) return undefined;
                if(caller != this.licensee) return 'not permitted';
                this.comment_text = comment_text;
            }


            publication(caller)  {
                if(this.already_terminated()) return undefined;
                if(caller != this.licensee) return 'not permitted';
                this.published = true;
            }


            grant_permission_to_comment(caller)  {
                if(this.already_terminated()) return undefined;
                if(caller != this.licensee) return 'not permitted';
                this.permission_to_comment = true;
            }


            declare_breach(caller)  {
                if(this.already_terminated()) return undefined;
                if(caller != main.agent) return 'not permitted';
                if(this.factually_breached()) {
                    main.transfer(main.agent, main.licensor, main.breach_fee);
                    this.termination();
                }
            }


            factually_breached()  {
                return ((this.commissioned && !this.comment_text)
                         || (this.published && (!this.permission_to_comment && (this.notice_time <= (Date.now() - (24 * 3600000))))));
            }


            notice(caller)  {
                if(this.already_terminated()) return undefined;
                if(!(caller == main.agent || caller == main.licensor)) return 'not permitted';
                this.notice_time = Date.now();
            }


            noticed()  {
                return this.notice_time;
            }


            termination() {
                this.terminated = true;
            }

            already_terminated() {
                if(!this.terminated) return false;
                console.log('✕ covenant previously terminated');
                return true;
            }
        }
    }


    add_license(caller, licensee, description_of_goods) {
        if (this.already_terminated()) return undefined;
        return this._license_list[this._license_count += 1] = this.License(caller, licensee, description_of_goods);
    }



    transfer(from, to, amount) {
        console.log(`➠ system message: transfer ${amount} from ${from} to ${to}.`);
        if(from == 'escrow') main._escrow -= amount;
        if(to == 'escrow') main._escrow += amount;
    }
}