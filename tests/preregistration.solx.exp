// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

/** Lexon-generated Solidity code
 **
 **	code:        Preregistration
 **
 **	file:        cover/preregistration.lex
 **
 **	compiler:    lexon 0.3 alpha 99 U
 **
 **	grammar:     0.2.20 / subset 0.3.9 alpha 99 - English / Reyes
 **
 **	backend:     solidity 0.3.99a U
 **
 **	target:      solidity 0.8.17+
 **
 **	options:     --solidity  --all-auxiliaries 
 **


   INSTRUCTIONS FOR USE:

   Deploy this smart contract to the Ethereum blockchain or Goerli testchain.  Replace
   the <parameters> with literal values to interact with the contract via terminal.

   Note that the instructions below reflect your lexon code, as well as the parameters
   used during compilation of the code: different functions and parameters will result
   from different input.  Some functions are 'built-in' but only appear when needed as
   per compiler options used during compilation  â€“  a list of which, is available with
   lexon -h.  The functions are given in the order of appearance, in the lexon source.

   The required caller is noted in double angle brackets << >>.  Some functions can be
   called by anyone.  Note that roles are being defined by using an address for it for
   the first time. This will require for the same address to be used for the same role
   after this point. Else, the call will revert.

   Some clauses of the original lexon source text do not appear in the comments below.
   Namely, those without permission phrase, wherefore they are regarded as internal.

   These are the constructor parameters for deployment:

   <deadline : uint>, <registry : address payable>

   These are the state progress functions that allow to interact with the contract:


   The following are actions that can be performed per Attendee.

   > attendee = preregistration.add_attendee(<attendee : address payable>)
 */

/**
 **
 **	Main Preregistration contract system
 **
 **/

/*
 | 	LEX Preregistration
 | 
 | 	"Organizer" is a person.
 | 	"Registry" is a person.
 | 	"Deadline" is a time.
 | 
 | 	The Organizer fixes the Deadline, and appoints the Registry.
 */

contract Preregistration {

    address payable public organizer;
    address payable public registry;
    uint public deadline;

    constructor(uint _deadline, address payable _registry) {
        organizer = payable(msg.sender);
        deadline = _deadline;
        registry = _registry;
    }

    /* aggregation of covenants for folds and serialization */

    mapping(uint => Attendee) public _attendee_list;
    uint _attendee_count = 0;

    /* create new instance of Attendee covenant, and register it with main */

    function add_attendee(address payable _attendee) public returns(Attendee) {
        permit(registry);
        return _attendee_list[_attendee_count += 1] = new Attendee(this, _attendee);
    }

    /* built-in caller assertion */

    function permit(address payable _authorized) internal view {
        require(msg.sender == _authorized, "not permitted");
    }
}

/**
 **
 **	Attendee covenant class
 **
 **/

/*
 | 	TERMS PER Attendee
 | 
 | 	"Attendee" is a person.
 | 
 | 	The Registry may, if the Deadline has not yet passed, appoint an Attendee.
 */

contract Attendee {

    Preregistration main;
    address payable public attendee;


    constructor(Preregistration _main, address payable _attendee) {
        main = _main;
        if(main.deadline() > block.timestamp) {
            attendee = _attendee;
        }
    }
}

/* end */
