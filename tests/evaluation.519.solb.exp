// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

contract EvaluationLicenseSystem {

    address payable licensor;
    address payable arbiter;
    uint licensing_service_fee;
    uint breach_service_fee;

    constructor(address payable _arbiter, uint _licensing_service_fee, uint _breach_service_fee) {
        licensor = payable(msg.sender);
        arbiter = _arbiter;
        licensing_service_fee = _licensing_service_fee;
        breach_service_fee = _breach_service_fee;
    }


    mapping(uint => contract) public _license_list;
    uint _license_count = 0;


    function add_license(address payable _license_taker, string memory _description_of_goods) returns(License) {
        check_termination();
        return _license_list[_license_count += 1] = new License(_license_taker, _description_of_goods);
    }


    function transfer(address _to, uint _amount) internal {
        (bool _success, ) = _to.call{value:_amount}("");
        require(_success, "transfer failed on receiver side");
    }


    function permit(address _authorized) internal view {
        require(msg.sender == _authorized, "not permitted");
    }
}

contract License {
    constructor(address payable _license_taker, string memory _description_of_goods) {
        license_taker = _license_taker;
        description_of_goods = _description_of_goods;
    }


    function pay() public {
        check_termination();
        if(msg.sender == license_taker) {
            transfer(licensor, licensing_service_fee);
        } else {
            revert("not permitted");
        }
        paid = true;
    }


    function commission() public {
        check_termination();
        permit(licensor);
        commissioned = true;
    }


    function comment(string memory _comment_text) public {
        check_termination();
        permit(license_taker);
        comment_text = _comment_text;
    }


    function publication() public {
        check_termination();
        permit(license_taker);
        published = true;
    }


    function grant_permission_to_comment() public {
        check_termination();
        permit(license_taker);
        permission_to_comment = true;
    }


    function declare_breach() public {
        check_termination();
        permit(arbiter);
        if(factually_breached()) {
            transfer(licensor, breach_service_fee);
            termination();
        }
    }


    function factually_breached() public view returns(bool) {
        return ((commissioned && comment_text == "")
                 || (published && (!permission_to_comment && (notice_time <= (block.timestamp - (24 * 3600))))));
    }


    function notice() public {
        check_termination();
        require(msg.sender == arbiter || msg.sender == licensor, "not permitted");
        notice_time = block.timestamp;
    }


    function noticed() public view returns(bool) {
        return notice_time != 0;
    }


    function termination() internal {
        terminated = true;
    }

    function already_terminated() internal view returns(bool) {
        if(!terminated) return false;
        return true;
    }
}