// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

contract Escrow {

    address payable public buyer;
    address payable public seller;
    address payable public arbiter;
    uint public service_fee;

    constructor(address payable _seller, address payable _arbiter, uint _service_fee) payable {
        buyer = payable(msg.sender);
        seller = _seller;
        arbiter = _arbiter;
        service_fee = _service_fee;
    }


    function permit(address payable _authorized) internal view {
        require(msg.sender == _authorized, "not permitted");
    }


    function transfer(address payable _to, uint _amount) internal {
        (bool _success, ) = _to.call{value:_amount}("");
        require(_success, "transfer failed on receiver side");
    }


    function pay_out() public {
        permit(arbiter);
        transfer(arbiter, service_fee);
        transfer(seller, address(this).balance);
    }


    function pay_back() public {
        permit(arbiter);
        transfer(arbiter, service_fee);
        transfer(buyer, address(this).balance);
    }
}