// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

contract UCCFinancingStatement {

    string public file_number;
    uint public initial_statement_date;
    address payable public filer;
    address payable public debtor;
    address payable public secured_party;
    address payable public filing_office;
    string public collateral;
    uint public digital_asset_collateral;
    uint public reminder_fee;
    uint public continuation_window_start;
    uint public continuation_statement_date;
    string public continuation_statement_filing_number;
    uint public lapse_date;
    bool public _default;
    bool public continuation_statement;
    bool public termination_statement;
    uint public termination_statement_time;
    string public notification_statement;
    bool reminder_fee__set = false;
    bool digital_asset_collateral__set = false;
    bool terminated = false;


    event Message(
        address indexed _from,
        address indexed _to,
        string _message);


    constructor(address payable _filing_office, address payable _debtor, address payable _secured_party, string memory _collateral) {
        filer = payable(msg.sender);
        filing_office = _filing_office;
        debtor = _debtor;
        secured_party = _secured_party;
        collateral = _collateral;
    }


    function permit(address payable _authorized) internal view {
        require(msg.sender == _authorized, "not permitted");
    }


    function transfer(address payable _to, uint _amount) internal {
        (bool _success, ) = _to.call{value:_amount}("");
        require(_success, "transfer failed on receiver side");
    }


    function notify(address payable _to, string memory _message) internal {
        emit Message(msg.sender, _to, _message);
    }


    function termination() internal {
        terminated = true;
    }


    function check_termination() internal view {
        require(!terminated, "contract system terminated before");
    }


    function certify(string memory _file_number) public {
        check_termination();
        permit(filing_office);
        file_number = _file_number;
    }


    function set_file_date() public {
        check_termination();
        permit(filing_office);
        initial_statement_date = block.timestamp;
    }


    function set_lapse(uint _lapse_date) public {
        check_termination();
        permit(filing_office);
        lapse_date = _lapse_date;
    }


    function set_continuation_start(uint _continuation_window_start) public {
        check_termination();
        permit(filing_office);
        continuation_window_start = _continuation_window_start;
    }


    function pay_fee() public payable {
        check_termination();
        permit(secured_party);
        if(reminder_fee__set) {
            require(msg.value == reminder_fee, "wrong amount");
        } else {
            reminder_fee = msg.value;
            reminder_fee__set = true;
        }
    }


    function notice(string memory _notification_statement) public {
        check_termination();
        permit(filing_office);
        notification_statement = _notification_statement;
    }


    function _notify() public {
        check_termination();
        permit(filing_office);
        if(continuation_window_start <= block.timestamp) {
            notify(secured_party, notification_statement);
        }
    }


    function pay_escrow_in() public payable {
        check_termination();
        permit(debtor);
        if(digital_asset_collateral__set) {
            require(msg.value == digital_asset_collateral, "wrong amount");
        } else {
            digital_asset_collateral = msg.value;
            digital_asset_collateral__set = true;
        }
    }


    function fail_to_pay() public {
        check_termination();
        permit(secured_party);
        _default = true;
    }


    function take_possession() public {
        check_termination();
        permit(filing_office);
        if(_default) {
            transfer(secured_party, digital_asset_collateral);
        }
    }


    function file_continuation(bool _continuation_statement) public {
        check_termination();
        permit(secured_party);
        continuation_statement = _continuation_statement;
    }


    function set_continuation_lapse(uint _continuation_statement_date) public {
        check_termination();
        permit(filing_office);
        if(continuation_statement) {
            continuation_statement_date = _continuation_statement_date;
        }
    }


    function file_termination(bool _termination_statement) public {
        check_termination();
        permit(secured_party);
        termination_statement = _termination_statement;
        termination_statement_time = block.timestamp;
    }


    function release_escrow() public {
        check_termination();
        permit(filing_office);
        if(termination_statement) {
            transfer(debtor, digital_asset_collateral);
        }
    }


    function release_reminder_fee() public {
        check_termination();
        permit(filing_office);
        if(termination_statement) {
            transfer(secured_party, reminder_fee);
        }
    }


    function termination_period() public view returns(uint) {
        return (termination_statement_time + (365 * 86400));
    }


    function terminate_and_clear() public {
        check_termination();
        permit(filing_office);
        if(termination_period() <= block.timestamp) {
            termination();
        }
    }
}