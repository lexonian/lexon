

@compiler >=8

namespace MainState =
    record main_state = {
            licensor : address,
            arbiter : address,
            licensing_fee : int,
            breach_fee : int,
            _license_list : list(address),
            _license_count : int
        }

using MainState

contract interface Main =
    entrypoint get_state: () => main_state

main contract EvaluationLicenseSystem : Main =


    type state = main_state

    entrypoint init(arbiter : address, licensing_fee : int, breach_fee : int) = {
            licensor = Call.caller,
            arbiter = arbiter,
            licensing_fee = licensing_fee,
            breach_fee = breach_fee,
            _license_list = [],
            _license_count = 0
        }

    entrypoint get_state() : state =
        state

        
    

    stateful entrypoint add_license(licensee : address, description_of_goods : string) : address =
        let covenant = Chain.create(Address.to_contract(Contract.address) : EvaluationLicenseSystem, licensee, description_of_goods) : License
        put(state{ _license_count = state._license_count + 1})
        put(state{ _license_list = covenant.address :: state._license_list })
        covenant.address

contract License =

    record state = {
            global : main_state,
            description_of_goods : string,
            licensee : address,
            paid : bool,
            commissioned : bool,
            comment_text : string,
            published : bool,
            permission_to_comment : bool,
            notice_time : int,
            terminated : bool
        }

    entrypoint init(global : Main, licensee : address, description_of_goods : string) = {
            description_of_goods = description_of_goods,
            licensee = licensee,
            paid = false,
            commissioned = false,
            comment_text = "",
            published = false,
            permission_to_comment = false,
            notice_time = 0,
            terminated = false,
            global = global.get_state()
        }


    stateful entrypoint pay() =
        check_termination()
        require(Call.caller == state.licensee, "not permitted")
        if(Call.caller == state.licensee)
            transfer(state.global.licensor, state.global.licensing_fee)
        put(state{paid = true})


    stateful entrypoint commission() =
        check_termination()
        permit(state.global.licensor)
        put(state{commissioned = true})


    stateful entrypoint comment(comment_text : string) =
        check_termination()
        permit(state.licensee)
        put(state{comment_text = comment_text})


    stateful entrypoint publication() =
        check_termination()
        permit(state.licensee)
        put(state{published = true})


    stateful entrypoint grant_permission_to_comment() =
        check_termination()
        permit(state.licensee)
        put(state{permission_to_comment = true})


    stateful entrypoint declare_breach() =
        check_termination()
        permit(state.global.arbiter)
        if(factually_breached())
            transfer(state.global.licensor, state.global.breach_fee)
            termination()


    entrypoint factually_breached() =
        ((state.commissioned && state.comment_text == "")
                 || (state.published && (!state.permission_to_comment && (state.notice_time =< (Chain.timestamp - (24 * 3600000))))))


    stateful entrypoint notice() =
        check_termination()
        require(Call.caller == state.global.arbiter || Call.caller == state.global.licensor, "not permitted")
        put(state{notice_time = Chain.timestamp})


    entrypoint noticed() =
        state.notice_time != 0


    function permit(authorized : address) =
        require(Call.caller == authorized, "access")


    stateful function transfer(to : address, amount : int) =
        Chain.spend(to, amount)


    stateful function termination() =
        put(state{terminated = true})

    function check_termination() =
        require(!state.terminated, "covenant terminated before")