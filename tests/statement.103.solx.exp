// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

/** Lexon-generated Solidity code
 **
 **	code:        UCC Financing Statement
 **
 **	file:        lexon/statement.103.lex
 **
 **	code tagged: 0.2.12
 **
 **	compiler:    lexon 0.3 beta 2
 **
 **	grammar:     0.2.20 / subset 0.3.9 beta 1 - English / Reyes
 **
 **	backend:     solidity 0.3.102 beta 2
 **
 **	target:      solidity 0.8.17+
 **
 **	options:     --solidity  --all-auxiliaries 
 **


   INSTRUCTIONS FOR USE:

   Deploy this smart contract to the Ethereum blockchain or Goerli testchain.  Replace
   the <parameters> with literal values to interact with the contract via terminal.

   Note that the instructions below reflect your lexon code, as well as the parameters
   used during compilation of the code: different functions and parameters will result
   from different input.  Some functions are 'built-in' but only appear when needed as
   per compiler options used during compilation  –  a list of which, is available with
   lexon -h.  The functions are given in the order of appearance, in the lexon source.

   The required caller is noted in double angle brackets << >>.  Some functions can be
   called by anyone.  Note that roles are being defined by using an address for it for
   the first time. This will require for the same address to be used for the same role
   after this point. Else, the call will revert.

   Some clauses of the original lexon source text do not appear in the comments below.
   Namely, those without permission phrase, wherefore they are regarded as internal.

   These are the constructor parameters for deployment:

   <filing_office : address payable>, <debtor : address payable>, <secured_party : address payable>, <collateral : string>

   These are the state progress functions that allow to interact with the contract:

   • <<filing_office>> ⟶   certify(<file_number : string>)
   • <<filing_office>> ⟶   set_file_date()
   • <<filing_office>> ⟶   set_lapse(<lapse_date : uint>)
   • <<filing_office>> ⟶   set_continuation_start(<continuation_window_start : uint>)
   • <<secured_party>> ⟶   pay_service_fee()
   • <<filing_office>> ⟶   notice(<notification_statement : string>)
   • <<filing_office>> ⟶   _notify()
   • <<debtor>> ⟶   pay_escrow_in()
   • <<secured_party>> ⟶   fail_to_pay()
   • <<filing_office>> ⟶   take_possession()
   • <<secured_party>> ⟶   file_continuation(<continuation_statement : bool>)
   • <<filing_office>> ⟶   set_continuation_lapse(<continuation_statement_date : uint>)
   • <<secured_party>> ⟶   file_termination(<termination_statement : bool>)
   • <<filing_office>> ⟶   release_escrow()
   • <<filing_office>> ⟶   release_reminder_service_fee()
   • anyone ⟶   termination_period()
   • <<filing_office>> ⟶   terminate_and_clear()
 */

/**
 **
 **	Main UCC Financing Statement contract system
 **
 **/

/*
 | 	LEX UCC Financing Statement.
 | 
 | 	LEXON: 0.2.12
 | 
 | 	"Financing Statement" is this contract. 
 | 	"File Number" is data.
 | 	"Initial Statement Date" is a time.
 | 	"Filer" is a person. 
 | 	"Debtor" is a person.
 | 	"Secured Party" is a person.
 | 	"Filing Office" is a person.
 | 	"Collateral" is data.
 | 	"Digital Asset Collateral" is an amount.
 | 	"Reminder Service Fee" is an amount.
 | 	"Continuation Window Start" is a time.
 | 	"Continuation Statement Date" is a time.
 | 	"Continuation Statement Filing Number" is data.
 | 	"Lapse Date" is a time.
 | 	"Default" is a binary.
 | 	"Continuation Statement" is a binary.
 | 	"Termination Statement" is a binary.
 | 	"Termination Statement Time" is a time.
 | 	"Notification Statement" is a text. 
 | 
 | 	The Filer fixes the Filing Office, fixes the Debtor, fixes the Secured Party, and fixes the Collateral.
 */

contract UCCFinancingStatement {

    string public file_number;
    uint public initial_statement_date;
    address payable public filer;
    address payable public debtor;
    address payable public secured_party;
    address payable public filing_office;
    string public collateral;
    uint public digital_asset_collateral;
    uint public reminder_service_fee;
    uint public continuation_window_start;
    uint public continuation_statement_date;
    string public continuation_statement_filing_number;
    uint public lapse_date;
    bool public _default;
    bool public continuation_statement;
    bool public termination_statement;
    uint public termination_statement_time;
    string public notification_statement;
    bool reminder_service_fee__set = false;
    bool digital_asset_collateral__set = false;
    bool terminated = false;


    event Message(
        address indexed _from,
        address indexed _to,
        string _message);


    constructor(address payable _filing_office, address payable _debtor, address payable _secured_party, string memory _collateral) {
        filer = payable(msg.sender);
        filing_office = _filing_office;
        debtor = _debtor;
        secured_party = _secured_party;
        collateral = _collateral;
    }

    /* built-in caller assertion */

    function permit(address payable _authorized) internal view {
        require(msg.sender == _authorized, "not permitted");
    }

    /* built-in safe transfer */

    function transfer(address payable _to, uint _amount) internal {
        (bool _success, ) = _to.call{value:_amount}("");
        require(_success, "transfer failed on receiver side");
    }

    /* built-in send message */

    function notify(address payable _to, string memory _message) internal {
        emit Message(msg.sender, _to, _message);
    }


    /* built-in termination of the contract system */

    function termination() internal {
        terminated = true;
    }


    function check_termination() internal view {
        require(!terminated, "contract system terminated before");
    }


    /* Certify clause */

    /*
     |  Clause: Certify.
     |  The Filing Office may certify the File Number.
     */

    function certify(string memory _file_number) public {
        check_termination();
        permit(filing_office);
        file_number = _file_number;
    }


    /* Set File Date clause */

    /*
     |  Clause: Set File Date.
     |  The Filing Office may fix the Initial Statement Date as the current time.
     */

    function set_file_date() public {
        check_termination();
        permit(filing_office);
        initial_statement_date = block.timestamp;
    }


    /* Set Lapse clause */

    /*
     |  Clause: Set Lapse.
     |  The Filing Office may fix the Lapse Date.
     */

    function set_lapse(uint _lapse_date) public {
        check_termination();
        permit(filing_office);
        lapse_date = _lapse_date;
    }


    /* Set Continuation Start clause */

    /*
     |  Clause: Set Continuation Start.
     |  The Filing Office may fix the Continuation Window Start.
     */

    function set_continuation_start(uint _continuation_window_start) public {
        check_termination();
        permit(filing_office);
        continuation_window_start = _continuation_window_start;
    }


    /* Pay Service Fee clause */

    /*
     |  Clause: Pay Service Fee.
     |  The Secured Party may pay a Reminder Service Fee into escrow.
     */

    function pay_service_fee() public payable {
        check_termination();
        permit(secured_party);
        if(reminder_service_fee__set) {
            require(msg.value == reminder_service_fee, "wrong amount");
        } else {
            reminder_service_fee = msg.value;
            reminder_service_fee__set = true;
        }
    }


    /* Notice clause */

    /*
     |  Clause: Notice.
     |  The Filing Office may fix the Notification Statement.
     */

    function notice(string memory _notification_statement) public {
        check_termination();
        permit(filing_office);
        notification_statement = _notification_statement;
    }


    /* Notify clause */

    /*
     |  Clause: Notify.
     |  The Filing Office may, given that the Continuation Window Start has passed, send the Notification Statement to the Secured Party.
     */

    function _notify() public {
        check_termination();
        permit(filing_office);
        if(continuation_window_start <= block.timestamp) {
            notify(secured_party, notification_statement);
        }
    }


    /* Pay Escrow In clause */

    /*
     |  Clause: Pay Escrow In.
     |  The Debtor may pay the Digital Asset Collateral into escrow.
     */

    function pay_escrow_in() public payable {
        check_termination();
        permit(debtor);
        if(digital_asset_collateral__set) {
            require(msg.value == digital_asset_collateral, "wrong amount");
        } else {
            digital_asset_collateral = msg.value;
            digital_asset_collateral__set = true;
        }
    }


    /* Fail to Pay clause */

    /*
     |  Clause: Fail to Pay.
     |  The Secured Party may declare Default.
     */

    function fail_to_pay() public {
        check_termination();
        permit(secured_party);
        _default = true;
    }


    /* Take Possession clause */

    /*
     |  Clause: Take Possession.
     |  The Filing Office may, given that Default is declared, pay the Digital Asset Collateral to the Secured Party.
     */

    function take_possession() public {
        check_termination();
        permit(filing_office);
        if(_default) {
            transfer(secured_party, digital_asset_collateral);
        }
    }


    /* File Continuation clause */

    /*
     |  Clause: File Continuation.
     |  The Secured Party may file the Continuation Statement.
     */

    function file_continuation(bool _continuation_statement) public {
        check_termination();
        permit(secured_party);
        continuation_statement = _continuation_statement;
    }


    /* Set Continuation Lapse clause */

    /*
     |  Clause: Set Continuation Lapse.
     |  The Filing Office may, given that the Continuation Statement is filed, fix the Continuation Statement Date.
     */

    function set_continuation_lapse(uint _continuation_statement_date) public {
        check_termination();
        permit(filing_office);
        if(continuation_statement) {
            continuation_statement_date = _continuation_statement_date;
        }
    }


    /* File Termination clause */

    /*
     |  Clause: File Termination.
     |  The Secured Party may file a Termination Statement, and certify the Termination Statement Time as the then current time.
     */

    function file_termination(bool _termination_statement) public {
        check_termination();
        permit(secured_party);
        termination_statement = _termination_statement;
        termination_statement_time = block.timestamp;
    }


    /* Release Escrow clause */

    /*
     |  Clause: Release Escrow.
     |  The Filing Office may, given that the Termination Statement is filed, pay the Digital Asset Collateral to the Debtor.
     */

    function release_escrow() public {
        check_termination();
        permit(filing_office);
        if(termination_statement) {
            transfer(debtor, digital_asset_collateral);
        }
    }


    /* Release Reminder Service Fee clause */

    /*
     |  Clause: Release Reminder Service Fee.
     |  The Filing Office may, given that the Termination Statement is filed, pay the Reminder Service Fee to the Secured Party.
     */

    function release_reminder_service_fee() public {
        check_termination();
        permit(filing_office);
        if(termination_statement) {
            transfer(secured_party, reminder_service_fee);
        }
    }


    /* Termination Period clause */

    /*
     |  Clause: Termination Period.
     |  "Termination Period" is defined as 365 days after the Termination Statement Time.
     */

    function termination_period() public view returns(uint) {
        return (termination_statement_time + (365 * 86400));
    }


    /* Terminate and Clear clause */

    /*
     |  Clause: Terminate and Clear.
     |  The Filing Office may, given that the Termination Period has passed, terminate this contract.
     */

    function terminate_and_clear() public {
        check_termination();
        permit(filing_office);
        if(termination_period() <= block.timestamp) {
            termination();
        }
    }
}

/* end */
