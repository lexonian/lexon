// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

/** Lexon-generated Solidity code
 **
 **	code:        Administration
 **
 **	file:        cover/administration--sophia-surplus-force-on-rvalue-expression.lex
 **
 **	compiler:    lexon 0.3 beta 3
 **
 **	grammar:     0.2.20 / subset 0.3.11 beta 3 - English / Reyes
 **
 **	backend:     solidity 0.3.103 beta 3c
 **
 **	target:      solidity 0.8.17+
 **
 **	options:     --solidity  --all-auxiliaries 
 **


   INSTRUCTIONS FOR USE:

   Deploy this smart contract to the Ethereum blockchain or Goerli testchain.  Replace
   the <parameters> with literal values to interact with the contract via terminal.

   Note that the instructions below reflect your lexon code, as well as the parameters
   used during compilation of the code: different functions and parameters will result
   from different input.  Some functions are 'built-in' but only appear when needed as
   per compiler options used during compilation  –  a list of which, is available with
   lexon -h.  The functions are given in the order of appearance, in the lexon source.

   The required caller is noted in double angle brackets << >>.  Some functions can be
   called by anyone.  Note that roles are being defined by using an address for it for
   the first time. This will require for the same address to be used for the same role
   after this point. Else, the call will revert.

   Some clauses of the original lexon source text do not appear in the comments below.
   Namely, those without permission phrase, wherefore they are regarded as internal.

   These are the constructor parameters for deployment:

   <secretary : address payable>

   These are the state progress functions that allow to interact with the contract:

   • <<manager>> ⟶   new_secretary()
   • <<manager>> ⟶   new_manager(<manager : address payable>)
   • <<secretary>> ⟶   propose_secretary(<proposed_new_secretary : address payable>)
 */

/**
 **
 **	Main Administration contract system
 **
 **/

/*
 | 	LEX Administration.
 | 
 | 	"Manager" is a person.
 | 	"Secretary" is a person.
 | 	"Proposed New Secretary" is a person.
 | 	"Accepted New Secretary" is a person.
 | 
 | 	The Manager appoints the Secretary.
 */

contract Administration {

    address payable public manager;
    address payable public secretary;
    address payable public proposed_new_secretary;
    address payable public accepted_new_secretary;


    constructor(address payable _secretary) {
        manager = payable(msg.sender);
        secretary = _secretary;
    }

    /* built-in caller assertion */

    function permit(address payable _authorized) internal view {
        require(msg.sender == _authorized, "not permitted");
    }


    /* New Secretary clause */

    /*
     |  CLAUSE: New Secretary.
     |  The Manager may, if the Accepted New Secretary is the Proposed New Secretary, appoint the Secretary as Accepted New Secretary.
     */

    function new_secretary() public {
        permit(manager);
        if((accepted_new_secretary == proposed_new_secretary)) {
            accepted_new_secretary = secretary;
        }
    }


    /* New Manager clause */

    /*
     |  CLAUSE: New Manager.
     |  The Manager may appoint a new Manager.
     */

    function new_manager(address payable _manager) public {
        permit(manager);
        manager = _manager;
    }


    /* Propose Secretary clause */

    /*
     |  CLAUSE: Propose Secretary.
     |  The Secretary may appoint a Proposed New Secretary.
     */

    function propose_secretary(address payable _proposed_new_secretary) public {
        permit(secretary);
        proposed_new_secretary = _proposed_new_secretary;
    }
}

/* end */
