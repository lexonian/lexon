/** Lexon-generated Sophia code
 **
 **	code:        Escrow
 **
 **	file:        lexon/escrow2.334.lex
 **
 **	compiler:    lexon 0.3 alpha 99 U
 **
 **	grammar:     0.2.20 / subset 0.3.8.3 alpha 98 - English / Reyes
 **
 **	backend:     sophia 0.3.99a U
 **
 **	target:      sophia 8+
 **
 **	options:     --sophia  --all-auxiliaries 
 **


   INSTRUCTIONS FOR USE:

   Deploy this smart contract to the Aeternity blockchain or testchain. An easy way to
   get started is to copy-paste this code into  https://studio.aepps.com.  Replace the
   <parameters> with literal values to interact with the contract via terminal.

   LIKE ALL SMART CONTRACTS THIS CODE MUST BE AUDITED BEFORE USING IT IN PRODUCTION.

   Note  that the instructions below  reflect your Lexon code,  as well as the options
   used during compilation of the code: different clauses and options will result from
   different input code.  Some functions are 'built-in' but only appear when needed as
   per compiler options used  during compilation – a list of options is available with
   lexon -h.  The functions are given in the order of appearance, in the Lexon source.

   The required caller is noted in double angle brackets << >>.  Some functions can be
   called by anyone.  Note that roles are being defined by using an account for it for
   the first time. This will require for the same account to be used for the same role
   after this point. Else, the call will revert, i.e. cancelled and not go through.

   Some clauses of the original Lexon source text do not appear in the comments below.
   Namely, those without permission phrase, wherefore they are regarded as internal.

   These are the constructor parameters for deployment. If you are using Aestudio, the
   fields under the deploy button are where your values for them go before deploying.

   <payee : option(address)>, <agent : option(address)>, <fee : option(int)>

   These are the state progress functions that allow to interact with the contract:

   • <<Agent>> ⟶   pay_out()
   • <<Agent>> ⟶   pay_back()
 */

@compiler >=8

include "Option.aes"

/**
 **
 **	Main Escrow contract system
 **
 **/

/*
 | 	LEX Escrow.
 | 
 | 	"Buyer" is	 person.
 | 	"Payee" is person.
 | 	"Agent" is  person.
 | 	"Fee" is	aN  amount.
 | 
 | 	The Buyer pays amount into escrow, appoints the Payee, appoints the Agent, and fixes the Fee.
 */


payable main contract Escrow =
    record state = {
        
            buyer : option(address),
            payee : option(address),
            agent : option(address),
            fee : option(int)
        }
    entrypoint init(payee : address, agent : address, fee : int) = {
            buyer = Some(Call.caller),
            payee = Some(payee),
            agent = Some(agent),
            fee = Some(fee)
        }
        
    

    /* built-in caller assertion */

    function permit(option_authorized : option(address), name : string) =
            switch(option_authorized)
                None => abort(StringInternal.concat(name, " not set"))
                Some(authorized) => if(Call.caller != authorized)
                    abort(StringInternal.concat(name, " only"))

    /* built-in safe transfer */

    stateful function transfer(to : address, amount : int) =
        Chain.spend(to, amount)


    /* Pay Out clause */

    /*
     |  CLAUSE: Pay Out.
     |  The Agent may pay from escrow the Fee to themselves, and afterwards pay the remainder of the escrow to the Payee.
     */

    stateful entrypoint pay_out() =
        permit(state.agent, "Agent")
        transfer(Option.force_msg(state.agent, "reflexive pronoun"), Option.force_msg( state.fee, "Fee"))
        transfer(Option.force_msg(state.payee, "Payee"), Contract.balance)


    /* Pay Back clause */

    /*
     |  CLAUSE: Pay Back.
     |  The Agent may pay from escrow the Fee to themselves, and afterwards pay the remainder of the escrow to the Buyer.
     */

    stateful entrypoint pay_back() =
        permit(state.agent, "Agent")
        transfer(Option.force_msg(state.agent, "reflexive pronoun"), Option.force_msg( state.fee, "Fee"))
        transfer(Option.force_msg(state.buyer, "Buyer"), Contract.balance)

/* end */
