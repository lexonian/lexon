// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

/** Lexon-generated Solidity code
 **
 **	code:        Asset
 **
 **	file:        cover/cut.lex
 **
 **	compiler:    lexon 0.3 beta 2
 **
 **	grammar:     0.2.20 / subset 0.3.9 beta 1 - English / Reyes
 **
 **	backend:     solidity 0.3.102 beta 2
 **
 **	target:      solidity 0.8.17+
 **
 **	options:     --solidity  --all-auxiliaries 
 **


   INSTRUCTIONS FOR USE:

   Deploy this smart contract to the Ethereum blockchain or Goerli testchain.  Replace
   the <parameters> with literal values to interact with the contract via terminal.

   Note that the instructions below reflect your lexon code, as well as the parameters
   used during compilation of the code: different functions and parameters will result
   from different input.  Some functions are 'built-in' but only appear when needed as
   per compiler options used during compilation  –  a list of which, is available with
   lexon -h.  The functions are given in the order of appearance, in the lexon source.

   The required caller is noted in double angle brackets << >>.  Some functions can be
   called by anyone.  Note that roles are being defined by using an address for it for
   the first time. This will require for the same address to be used for the same role
   after this point. Else, the call will revert.

   Some clauses of the original lexon source text do not appear in the comments below.
   Namely, those without permission phrase, wherefore they are regarded as internal.

   These are the constructor parameters for deployment:

   <id : string>, <cut : uint>, <owner : address payable>

   These are the state progress functions that allow to interact with the contract:

   • <<owner>> ⟶   transfer_ownership(<owner : address payable>)
 */

/**
 **
 **	Main Asset contract system
 **
 **/

/*
 | 	LEX Asset.
 | 
 | 	"Id" is a text.
 | 	"Creator" is a person.
 | 	"Owner" is a person.
 | 	"Cut" is an amount.
 | 
 | 	The Creator fixes the Id, fixes the Cut, and appoints the Owner.
 */

contract Asset {

    string public id;
    address payable public creator;
    address payable public owner;
    uint public cut;


    constructor(string memory _id, uint _cut, address payable _owner) {
        creator = payable(msg.sender);
        id = _id;
        cut = _cut;
        owner = _owner;
    }

    /* built-in caller assertion */

    function permit(address payable _authorized) internal view {
        require(msg.sender == _authorized, "not permitted");
    }

    /* built-in safe transfer */

    function transfer(address payable _to, uint _amount) internal {
        (bool _success, ) = _to.call{value:_amount}("");
        require(_success, "transfer failed on receiver side");
    }


    /* Transfer Ownership clause */

    /*
     |  CLAUSE: Transfer Ownership.
     |  The Owner may pay the Cut to the Creator, and appoint the Owner.
     */

    function transfer_ownership(address payable _owner) public {
        permit(owner);
        transfer(creator, cut);
        owner = _owner;
    }
}

/* end */
