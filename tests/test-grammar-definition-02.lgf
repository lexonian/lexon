# Minimal English Lexon Grammar %LGF %LGFERR

Work in progress.


## Document Head

   document:	head terms [xcontracts]

   head:	lex [lexon] [authors] [xcomment] [preamble] 

   lex: 	"LEX" ":" name separator
   lexon: 	"LEXON" ":" text separator
   authors: 	"AUTHOR"["S"] ":" text separator
   xcomment: 	"COMMENT"["S"] ":" text separator
   preamble: 	"PREAMBLE" ":" text separator


## Sections

   t e r m s: 	["TERMS" ":"] [separator] provisions

   xcontracts: 	[xcontracts] contract

   c o n t r a c t: "CONTRACTA" "PER" name ":" [separator] provisions


## Provisions

   p r o v i s i o n s: definitions [statements] [clauses]


## Definitions 

   definitions: [definitions] definition

   definition: 	[article] quote name quote "is" placeholder separator
		or [article] quote name quote "is" this_contract separator

   placeholder: [article] type



## Types

   type: 	"person" or "amount" or "time" or "binary" or "writ"

   this_contract:this "contract"
		or this name

   all_contracts:"all" "contracts"

   this: 	"this" or "these" or "the" or "said"


## Clauses

   clauses: 	[clauses] clause

   c l a u s e : "CLAUSE" ":" name separator body

   body: 	actions or functions 


## FUNCTION

   functions:	[functions] function

   function: 	[article] quote name quote illocutor [":"] expression separator



# IV. SENTENCE LEVEL

## STATEMENT

   s t a t e m e n t s : [statements] statement
  
   statement:	action or flagging

## ACTION

   actions:	[actions] action

   action:	simple

   simple:	subject [permission] [condition ":"] predicates separator


# V. PHRASE LEVEL

## SUBJECT

   subject:	symbols

## SYMBOLS

   symbols:	[symbols catena] symbol

   symbol:	[article] name

   catena:	"or" or comma

## OBJECT

   object:	symbol or "escrow"

## PREDICATE

   predicates:	predicates comma ["and"] ["afterwards"] predicate
		or predicate

   predicate:	certification
		or xregistration
		or grantment
		or appointment
		or fixture
		or setting
		or payment
		or termination

   permission:	"may"

## CERTIFICATION PREDICATE

   certification:certify this_contract ["as"] binary_type_symbol

   certify:	"certify" or "certifies"

## REGISTRATION PREDICATE

   xregistration: register symbol ["as"] expression 

   register:	"register" or "registers"

## GRANT PREDICATE

   grantment:	grant binary_type_symbol

   grant:	"grant" or "grants"

## APPOINTMENT PREDICATE

   appointment:	appoint symbol 

   appoint:	"appoint" or "appoints"

## FIXTURE PREDICATE

   fixture:	fix symbol
		or fix expression "as" [article] ["new"] name

   fix:		"fix" or "fixes"

## FIXTURE PREDICATE / PASSIVE

   setting:	illocutor ["therefor"["e"]] symbol

   illocutor: 	be ["defined"] ["as"]

   be:		"be" or "is"

## PAYMENT PREDICATE

   payment: 	pay [from_escrow] expression preposition object
		or pay expression from_escrow preposition object

   pay:		"pay" or "pays" or "return" or "returns"

   preposition:	"to" or "into"

   from_escrow:	"from" "escrow"

## TERMINATION PREDICATE

   termination:	terminate this_contract
		or terminate all_contracts
   terminate:	"terminate" or "terminates"

## FLAGGING

   flagging:	[this_contract] illocutor ["therefore"] binary_type_symbol separator

   binary_type_symbol: symbol


# VI. EXPRESSION LEVEL

## CONDITIONS

   condition:	if logic then

   if:		"if"

   then:	"then"

## EXPRESSION

   expression:	logic
		or symbol

## COMPARISON

   scalar_comparison:	scalar_expression comparison_operator scalar_expression 

   comparison_operator:	equal

   equal:		"equal" ["to"]
			or "equaling"
			or "is" ["equal" ["to"]]
			or "xbeing" ["equal" ["to"]]

   scalar_expression:	"SCALAR"

## LOGIC EXPRESSIONS

   logic:	combination
		or scalar_comparison

   combination: combinant combinator combinant
		or negation

   combinant:	existence 
		# or status
		or time_comparison

   combinator:	comma 
		or [comma] "or"
		or [comma] "and"
		or [comma] "neither"
		or [comma] "nor"
		or equal

   existence:	symbol "being" "fixed" 

   # status:	[this_contract] be symbol

   negation:	negator symbol

   negator:	"no"


## FILLERS

   article:	"a" or "an" or "the"

   numeric_expression: "NUMBER"

## TIME

   time:	"the" ["respective"] "current" "time"
		or numeric_expression time_unit

   time_unit:	"hour"["s"]

## TIME COMPARISON

   time_comparison:	name equal relative_time 

   relative_time:	time ["in" "the"] "past"
