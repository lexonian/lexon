// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

contract Escrow {

    address payable public payer;
    address payable public payee;
    address payable public agent;
    uint public fee;

    constructor(address payable _payee, address payable _agent, uint _fee) payable {
        payer = payable(msg.sender);
        payee = _payee;
        agent = _agent;
        fee = _fee;
    }


    function permit(address payable _authorized) internal view {
        require(msg.sender == _authorized, "not permitted");
    }


    function transfer(address payable _to, uint _amount) internal {
        (bool _success, ) = _to.call{value:_amount}("");
        require(_success, "transfer failed on receiver side");
    }


    function pay_out() public {
        permit(agent);
        transfer(agent, fee);
        transfer(payee, address(this).balance);
    }


    function pay_back() public {
        permit(agent);
        transfer(agent, fee);
        transfer(payer, address(this).balance);
    }
}