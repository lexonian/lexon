

@compiler >=6

main contract UCCFinancingStatement =

    record state = {
            file_number : string,
            initial_statement_date : int,
            filer : address,
            debtor : address,
            secured_party : address,
            filing_office : address,
            collateral : string,
            digital_asset_collateral : int,
            reminder_service_fee : int,
            continuation_window_start : int,
            continuation_statement_date : int,
            continuation_statement_filing_number : string,
            lapse_date : int,
            _default : bool,
            continuation_statement : bool,
            termination_statement : bool,
            termination_statement_time : int,
            notification_statement : string,
            terminated : bool
        }

    datatype event = Message(indexed address, indexed address, string)

    entrypoint init(filing_office : address, debtor : address, secured_party : address, collateral : string) = {
            file_number = "",
            initial_statement_date = 0,
            filer = Call.caller,
            debtor = debtor,
            secured_party = secured_party,
            filing_office = filing_office,
            collateral = collateral,
            digital_asset_collateral = 0,
            reminder_service_fee = 0,
            continuation_window_start = 0,
            continuation_statement_date = 0,
            continuation_statement_filing_number = "",
            lapse_date = 0,
            _default = false,
            continuation_statement = false,
            termination_statement = false,
            termination_statement_time = 0,
            notification_statement = "",
            terminated = false
        }


    stateful function termination() =
        put(state{terminated = true})

    function check_termination() =
        require(!state.terminated, "contract system terminated before")

    stateful function transfer(to : address, amount : int) =
        Chain.spend(to, amount)

    function send(to : address, message : string) =
        Chain.event(Message(Call.caller, to, message))

    function permit(authorized : address) =
        require(Call.caller == authorized, "access")


    stateful entrypoint certify(file_number : string) =
            check_termination()
        permit(state.filing_office)
        put(state{file_number = file_number})

    stateful entrypoint set_file_date() =
            check_termination()
        permit(state.filing_office)
        put(state{initial_statement_date = Chain.timestamp})

    stateful entrypoint set_lapse(lapse_date : int) =
            check_termination()
        permit(state.filing_office)
        put(state{lapse_date = lapse_date})

    stateful entrypoint set_continuation_start(continuation_window_start : int) =
            check_termination()
        permit(state.filing_office)
        put(state{continuation_window_start = continuation_window_start})

    stateful payable entrypoint pay_service_fee() =
            check_termination()
        permit(state.secured_party)
        put(state{reminder_service_fee = state.reminder_service_fee + Call.value})

    stateful entrypoint notice(notification_statement : string) =
            check_termination()
        permit(state.filing_office)
        put(state{notification_statement = notification_statement})

    entrypoint notify() =
            check_termination()
        permit(state.filing_office)
        if(state.continuation_window_start =< Chain.timestamp)
            send(state.secured_party, state.notification_statement)

    stateful payable entrypoint pay_escrow_in() =
            check_termination()
        permit(state.debtor)
        put(state{digital_asset_collateral = state.digital_asset_collateral + Call.value})

    stateful entrypoint fail_to_pay() =
            check_termination()
        permit(state.secured_party)
        put(state{_default = true})

    stateful entrypoint take_possession() =
            check_termination()
        permit(state.filing_office)
        if(state._default)
            transfer(state.secured_party, state.digital_asset_collateral)

    stateful entrypoint file_continuation(continuation_statement : bool) =
            check_termination()
        permit(state.secured_party)
        put(state{continuation_statement = continuation_statement})

    stateful entrypoint set_continuation_lapse(continuation_statement_date : int) =
            check_termination()
        permit(state.filing_office)
        if(state.continuation_statement)
            put(state{continuation_statement_date = continuation_statement_date})

    stateful entrypoint file_termination(termination_statement : bool) =
            check_termination()
        permit(state.secured_party)
        put(state{termination_statement = termination_statement})
        put(state{termination_statement_time = Chain.timestamp})

    stateful entrypoint release_escrow() =
            check_termination()
        permit(state.filing_office)
        if(state.termination_statement)
            transfer(state.debtor, state.digital_asset_collateral)

    stateful entrypoint release_reminder_service_fee() =
            check_termination()
        permit(state.filing_office)
        if(state.termination_statement)
            transfer(state.secured_party, state.reminder_service_fee)

    entrypoint termination_period() =
        (state.termination_statement_time + (365 * 86400000))

    stateful entrypoint terminate_and_clear() =
            check_termination()
        permit(state.filing_office)
        if(termination_period() =< Chain.timestamp)
            termination()