/** Lexon-generated Sophia code
 **
 **	code:        Evaluation License System
 **
 **	preamble:    This is licensing contract for software evaluation
 **
 **	authors:     FLORIAN IDELBERGER, HENNING DIEDRICH
 **
 **	file:        lexon/evaluation.866.lex
 **
 **	code tagged: 0.2.1
 **
 **	compiler:    lexon 0.3 alpha 99 U
 **
 **	grammar:     0.2.20 / subset 0.3.8.3 alpha 98 - English / Reyes
 **
 **	backend:     sophia 0.3.99a U
 **
 **	target:      sophia 8+
 **
 **	options:     --sophia  --all-auxiliaries 
 **


   INSTRUCTIONS FOR USE:

   Deploy this smart contract to the Aeternity blockchain or testchain. An easy way to
   get started is to copy-paste this code into  https://studio.aepps.com.  Replace the
   <parameters> with literal values to interact with the contract via terminal.

   LIKE ALL SMART CONTRACTS THIS CODE MUST BE AUDITED BEFORE USING IT IN PRODUCTION.

   Note  that the instructions below  reflect your Lexon code,  as well as the options
   used during compilation of the code: different clauses and options will result from
   different input code.  Some functions are 'built-in' but only appear when needed as
   per compiler options used  during compilation – a list of options is available with
   lexon -h.  The functions are given in the order of appearance, in the Lexon source.

   The required caller is noted in double angle brackets << >>.  Some functions can be
   called by anyone.  Note that roles are being defined by using an account for it for
   the first time. This will require for the same account to be used for the same role
   after this point. Else, the call will revert, i.e. cancelled and not go through.

   Some clauses of the original Lexon source text do not appear in the comments below.
   Namely, those without permission phrase, wherefore they are regarded as internal.

   These are the constructor parameters for deployment. If you are using Aestudio, the
   fields under the deploy button are where your values for them go before deploying.

   <arbiter : option(address)>, <licensing_fee : option(int)>, <breach_fee : option(int)>

   These are the state progress functions that allow to interact with the contract:


   The following are actions that can be performed per License.

   > license = evaluation.add_license(<license_taker : option(address)>, <description_of_goods : option(string)>)
   • <<License Taker>> ⟶   pay()
   • <<Licensor>> ⟶   commission()
   • <<License Taker>> ⟶   comment(<comment_text : option(string)>)
   • <<License Taker>> ⟶   publication()
   • <<License Taker>> ⟶   grant_permission_to_comment()
   • <<Arbiter>> ⟶   declare_breach()
   • anyone ⟶   factually_breached()
   • <<Arbiter or Licensor>> ⟶   notice()
   • anyone ⟶   noticed()
 */

@compiler >=8

include "Option.aes"

namespace MainState =
    record main_state = {
            licensor : option(address),
            arbiter : option(address),
            licensing_fee : option(int),
            breach_fee : option(int),
            _license_list : list(address),
            _license_count : int
        }

using MainState

contract interface Main =
    entrypoint get_state: () => main_state


/**
 **
 **	Main Evaluation License System contract system
 **
 **/

/*
 | 	LEX: Evaluation License System
 | 
 | 	LEXON: 0.2.1
 | 	AUTHORS: FLORIAN IDELBERGER, HENNING DIEDRICH
 | 	PREAMBLE: This is licensing contract for software evaluation
 | 
 | 	
 | 	TERMS:
 | 
 | 	"Licensor" is person
 | 
 | 	"Arbiter" is person
 | 
 | 	"Licensing Fee" is amount
 | 
 | 	"Breach Fee" is amount
 | 
 | 	
 | 	The Licensor appoints the Arbiter,
 | 	fixes the Licensing Fee,
 | 	and fixes the Breach Fee
 */


main contract EvaluationLicenseSystem : Main =


    type state = main_state

    entrypoint init(arbiter : address, licensing_fee : int, breach_fee : int) = {
            licensor = Some(Call.caller),
            arbiter = Some(arbiter),
            licensing_fee = Some(licensing_fee),
            breach_fee = Some(breach_fee),
            _license_list = [],
            _license_count = 0
        }

    entrypoint get_state() : state =
        state

        
    

    /* create new instance of License covenant, and register it with main */
    stateful entrypoint add_license(license_taker : address, description_of_goods : string) : address =
        let covenant = Chain.create(Address.to_contract(Contract.address) : EvaluationLicenseSystem, license_taker, description_of_goods) : License
        put(state{ _license_count = state._license_count + 1})
        put(state{ _license_list = covenant.address :: state._license_list })
        covenant.address

/**
 **
 **	License covenant class
 **
 **/

/*
 | 	TERMS PER License
 | 
 | 	"Description of Goods" is text
 | 
 | 	"License Taker" is person
 | 
 | 	"Paid" is binary
 | 
 | 	"Commissioned" is binary
 | 
 | 	"Comment Text" is text
 | 
 | 	"Published" is binary
 | 
 | 	"Permission to Comment" is binary
 | 
 | 	"Notice Time" is time
 | 
 | 	"License" is this contract
 | 
 | 	
 | 	The Licensor appoints the License Taker, and fixes the Description of Goods
 */

contract License =

    record state = {
            global : main_state,
            description_of_goods : option(string),
            license_taker : option(address),
            paid : option(bool),
            commissioned : option(bool),
            comment_text : option(string),
            published : option(bool),
            permission_to_comment : option(bool),
            notice_time : option(int),
            terminated : bool
        }

    entrypoint init(global : Main, license_taker : address, description_of_goods : string) = {
            description_of_goods = Some(description_of_goods),
            license_taker = Some(license_taker),
            paid = None,
            commissioned = None,
            comment_text = None,
            published = None,
            permission_to_comment = None,
            notice_time = None,
            terminated = false,
            global = global.get_state()
        }


    /* Pay clause */

    /*
     |  CLAUSE: Pay
     |  
     |  The License Taker pays the Licensing Fee to the Licensor,
     |  and pays the Breach Fee into escrow
     |  
     |  This License is therefore Paid
     */

    stateful entrypoint pay() =
        check_termination()
        require(Some(Call.caller) == state.license_taker, "not permitted")
        if(Some(Call.caller) == state.license_taker)
            transfer(Option.force_msg(state.global.licensor, "Licensor"), Option.force_msg( state.global.licensing_fee, "Licensing Fee"))
        put(state{paid = Some(true)})


    /* Commission clause */

    /*
     |  CLAUSE: Commission
     |  
     |  The Licensor may certify this License as Commissioned
     */

    stateful entrypoint commission() =
        check_termination()
        permit(state.global.licensor, "Licensor")
        put(state{commissioned = Some(true)})


    /* Comment clause */

    /*
     |  CLAUSE: Comment
     |  
     |  The License Taker may register Comment Text.
     */

    stateful entrypoint comment(comment_text : string) =
        check_termination()
        permit(state.license_taker, "License Taker")
        put(state{comment_text = Some(comment_text)})


    /* Publication clause */

    /*
     |  CLAUSE: Publication
     |  
     |  The License Taker may certify this License as Published
     */

    stateful entrypoint publication() =
        check_termination()
        permit(state.license_taker, "License Taker")
        put(state{published = Some(true)})


    /* Grant Permission to Comment clause */

    /*
     |  CLAUSE: Grant Permission to Comment
     |  
     |  The License Taker may grant the Permission to Comment
     */

    stateful entrypoint grant_permission_to_comment() =
        check_termination()
        permit(state.license_taker, "License Taker")
        put(state{permission_to_comment = Some(true)})


    /* Declare Breach clause */

    /*
     |  CLAUSE: Declare Breach
     |  
     |  The Arbiter may, if this License is Factually Breached:
     |  pay the Breach Fee to the Licensor,
     |  and afterwards terminate this License
     */

    stateful entrypoint declare_breach() =
        check_termination()
        permit(state.global.arbiter, "Arbiter")
        if(factually_breached() == Some(true))
            transfer(Option.force_msg(state.global.licensor, "Licensor"), Option.force_msg( state.global.breach_fee, "Breach Fee"))
            termination()


    /* Factually Breached clause */

    /*
     |  CLAUSE: Factually Breached
     |  
     |  "Factually Breached" is defined as:
     |  this License is Commissioned and the Comment Text is not fixed,
     |  or this License is Published and there is no Permission to Comment and the Notice Time lies at least 24 hours in the past
     */

    entrypoint factually_breached() =
        Some(((state.commissioned == Some(true) && state.comment_text == None)
                 || (state.published == Some(true) && (state.permission_to_comment == Some(false) && (Option.force_msg(state.notice_time, "Notice Time not set") =< (Chain.timestamp - (24 * 3600000)))))))


    /* Notice clause */

    /*
     |  CLAUSE: Notice
     |  
     |  The Licensor or the Arbiter may fix the Notice Time as the respective current time
     */

    stateful entrypoint notice() =
        check_termination()
        require(Some(Call.caller) == state.global.arbiter || Some(Call.caller) == state.global.licensor, "not permitted")
        put(state{notice_time = Some(Chain.timestamp)})


    /* Noticed clause */

    /*
     |  CLAUSE: Noticed
     |  
     |  "Noticed" is defined as Notice Time being fixed
     */

    entrypoint noticed() =
        Some(state.notice_time != None)

    /* built-in caller assertion */

    function permit(option_authorized : option(address), name : string) =
            switch(option_authorized)
                None => abort(StringInternal.concat(name, " not set"))
                Some(authorized) => if(Call.caller != authorized)
                    abort(StringInternal.concat(name, " only"))

    /* built-in safe transfer */

    stateful function transfer(to : address, amount : int) =
        Chain.spend(to, amount)


    /* built-in termination of the covenant */

    stateful function termination() =
        put(state{terminated = true})

    function check_termination() =
        require(!state.terminated, "covenant terminated before")

/* end */
