/** Lexon-generated Sophia code
 **
 **	code:        Evaluation License System
 **
 **	preamble:    This is a licensing contract for a software evaluation.
 **
 **	authors:     FLORIAN IDELBERGER, HENNING DIEDRICH
 **
 **	file:        evaluation.lex
 **
 **	code tagged: 0.2.1
 **
 **	compiler:    lexon 0.3 beta 2
 **
 **	grammar:     0.2.20 / subset 0.3.9 beta 1 - English / Reyes
 **
 **	backend:     sophia 0.3.102 beta 2
 **
 **	target:      sophia 8+
 **
 **	options:     --sophia  --comment 
 **
 */

@compiler >=8

namespace MainState =
    record main_state = {
            licensor : address,
            arbiter : address,
            licensing_fee : int,
            breach_fee : int,
            _license_list : list(address),
            _license_count : int
        }

using MainState

contract interface Main =
    entrypoint get_state: () => main_state


/**
 **
 **	Main Evaluation License System contract system
 **
 **/

/*
 | 	LEX: Evaluation License System.
 | 	LEXON: 0.2.1
 | 	AUTHORS: FLORIAN IDELBERGER, HENNING DIEDRICH
 | 	PREAMBLE: This is a licensing contract for a software evaluation.
 | 
 | 	TERMS:
 | 
 | 	"Licensor" is a person.
 | 	"Arbiter" is a person.
 | 	"Licensing Fee" is an amount.
 | 	"Breach Fee" is an amount.
 | 
 | 	The Licensor appoints the Arbiter,
 | 	fixes the Licensing Fee,
 | 	and fixes the Breach Fee.
 */


main contract EvaluationLicenseSystem : Main =


    type state = main_state

    entrypoint init(arbiter : address, licensing_fee : int, breach_fee : int) = {
            licensor = Call.caller,
            arbiter = arbiter,
            licensing_fee = licensing_fee,
            breach_fee = breach_fee,
            _license_list = [],
            _license_count = 0
        }

    entrypoint get_state() : state =
        state

        
    

    /* create new instance of License covenant, and register it with main */
    stateful entrypoint add_license(licensee : address, description_of_goods : string) : address =
        let covenant = Chain.create(Address.to_contract(Contract.address) : EvaluationLicenseSystem, licensee, description_of_goods) : License
        put(state{ _license_count = state._license_count + 1})
        put(state{ _license_list = covenant.address :: state._license_list })
        covenant.address

/**
 **
 **	License covenant class
 **
 **/

/*
 | 	TERMS PER License
 | 
 | 	"Description of Goods" is a text.
 | 	"Licensee" is a person.
 | 	"Paid" is a binary.
 | 	"Commissioned" is a binary.
 | 	"Comment Text" is a text.
 | 	"Published" is a binary.
 | 	"Permission to Comment" is a binary.
 | 	"Notice Time" is a time.
 | 	"License" is this contract.
 | 
 | 	The Licensor appoints the Licensee, and fixes the Description of Goods.
 */

contract License =

    record state = {
            global : main_state,
            description_of_goods : string,
            licensee : address,
            paid : bool,
            commissioned : bool,
            comment_text : string,
            published : bool,
            permission_to_comment : bool,
            notice_time : int,
            terminated : bool
        }

    entrypoint init(global : Main, licensee : address, description_of_goods : string) = {
            description_of_goods = description_of_goods,
            licensee = licensee,
            paid = false,
            commissioned = false,
            comment_text = "",
            published = false,
            permission_to_comment = false,
            notice_time = 0,
            terminated = false,
            global = global.get_state()
        }


    /* Pay clause */

    /*
     |  CLAUSE: Pay.
     |  The Licensee pays the Licensing Fee to the Licensor,
     |  and pays the Breach Fee into escrow.
     |  This License is therefore Paid.
     */

    stateful entrypoint pay() =
        check_termination()
        require(Call.caller == state.licensee, "not permitted")
        if(Call.caller == state.licensee)
            transfer(state.global.licensor, state.global.licensing_fee)
        put(state{paid = true})


    /* Commission clause */

    /*
     |  CLAUSE: Commission.
     |  The Licensor may certify this License as Commissioned.
     */

    stateful entrypoint commission() =
        check_termination()
        permit(state.global.licensor)
        put(state{commissioned = true})


    /* Comment clause */

    /*
     |  CLAUSE: Comment.
     |  The Licensee may register a Comment Text.
     */

    stateful entrypoint comment(comment_text : string) =
        check_termination()
        permit(state.licensee)
        put(state{comment_text = comment_text})


    /* Publication clause */

    /*
     |  CLAUSE: Publication.
     |  The Licensee may certify this License as Published.
     */

    stateful entrypoint publication() =
        check_termination()
        permit(state.licensee)
        put(state{published = true})


    /* Grant Permission to Comment clause */

    /*
     |  CLAUSE: Grant Permission to Comment.
     |  The Licensee may grant the Permission to Comment.
     */

    stateful entrypoint grant_permission_to_comment() =
        check_termination()
        permit(state.licensee)
        put(state{permission_to_comment = true})


    /* Declare Breach clause */

    /*
     |  CLAUSE: Declare Breach.
     |  The Arbiter may, if this License is Factually Breached:
     |  pay the Breach Fee to the Licensor,
     |  and afterwards terminate this License.
     */

    stateful entrypoint declare_breach() =
        check_termination()
        permit(state.global.arbiter)
        if(factually_breached())
            transfer(state.global.licensor, state.global.breach_fee)
            termination()


    /* Factually Breached clause */

    /*
     |  CLAUSE: Factually Breached.
     |  "Factually Breached" is defined as:
     |  this License is Commissioned and the Comment Text is not fixed,
     |  or this License is Published and there is no Permission to Comment and the Notice Time lies at least 24 hours in the past.
     */

    entrypoint factually_breached() =
        ((state.commissioned && state.comment_text == "")
                 || (state.published && (!state.permission_to_comment && (state.notice_time =< (Chain.timestamp - (24 * 3600000))))))


    /* Notice clause */

    /*
     |  CLAUSE: Notice.
     |  The Licensor or the Arbiter may fix the Notice Time as the respective current time.
     */

    stateful entrypoint notice() =
        check_termination()
        require(Call.caller == state.global.arbiter || Call.caller == state.global.licensor, "not permitted")
        put(state{notice_time = Chain.timestamp})


    /* Noticed clause */

    /*
     |  CLAUSE: Noticed.
     |  "Noticed" is defined as a Notice Time being fixed.
     */

    entrypoint noticed() =
        state.notice_time != 0

    /* built-in caller assertion */

    function permit(authorized : address) =
        require(Call.caller == authorized, "access")

    /* built-in safe transfer */

    stateful function transfer(to : address, amount : int) =
        Chain.spend(to, amount)


    /* built-in termination of the covenant */

    stateful function termination() =
        put(state{terminated = true})


    function check_termination() =
        require(!state.terminated, "covenant terminated before")

/* end */
