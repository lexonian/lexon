/** Lexon-generated Javascript 
 **
 **	code:        UCC Financing Statement
 **
 **	file:        statement.lex
 **
 **	code tagged: 0.2.12
 **
 **	compiler:    lexon 0.3 beta 2
 **
 **	grammar:     0.2.20 / subset 0.3.9 beta 1 - English / Reyes
 **
 **	backend:     javascript 0.3.102 beta 2
 **
 **	target:      node 14.1+
 **
 **	options:     --javascript  --harden  --comment 
 **
 */

/**
 **
 **	Main UCC Financing Statement contract system
 **
 **/

/*
 | 	LEX UCC Financing Statement.
 | 
 | 	LEXON: 0.2.12
 | 
 | 	"Financing Statement" is this contract. 
 | 	"File Number" is data.
 | 	"Initial Statement Date" is a time.
 | 	"Filer" is a person. 
 | 	"Debtor" is a person.
 | 	"Secured Party" is a person.
 | 	"Filing Office" is a person.
 | 	"Collateral" is data.
 | 	"Digital Asset Collateral" is an amount.
 | 	"Reminder Fee" is an amount.
 | 	"Continuation Window Start" is a time.
 | 	"Continuation Statement Date" is a time.
 | 	"Continuation Statement Filing Number" is data.
 | 	"Lapse Date" is a time.
 | 	"Default" is a binary.
 | 	"Continuation Statement" is a binary.
 | 	"Termination Statement" is a binary.
 | 	"Termination Statement Time" is a time.
 | 	"Notification Statement" is a text. 
 | 
 | 	The Filer fixes the Filing Office, fixes the Debtor, fixes the Secured Party, and fixes the Collateral.
 */

module.exports = class UCCFinancingStatement {

    constructor(filer, filing_office, debtor, secured_party, collateral) {
        this._escrow = 0;
        this.file_number = null;
        this.initial_statement_date = null;
        this.filer = filer;
        this.debtor = debtor;
        this.secured_party = secured_party;
        this.filing_office = filing_office;
        this.collateral = collateral;
        this.digital_asset_collateral = null;
        this.reminder_fee = null;
        this.continuation_window_start = null;
        this.continuation_statement_date = null;
        this.continuation_statement_filing_number = null;
        this.lapse_date = null;
        this.default_ = null;
        this.continuation_statement = null;
        this.termination_statement = null;
        this.termination_statement_time = null;
        this.notification_statement = null;
        this.terminated = false;
    }



    /* Certify clause */

    /*
     |  Clause: Certify.
     |  The Filing Office may certify the File Number.
     */

    certify(caller, file_number)  {
        if(this.check_termination()) return undefined;
        if(caller != this.filing_office) return 'not permitted';
        this.file_number = file_number;
    }


    /* Set File Date clause */

    /*
     |  Clause: Set File Date.
     |  The Filing Office may fix the Initial Statement Date as the current time.
     */

    set_file_date(caller)  {
        if(this.check_termination()) return undefined;
        if(caller != this.filing_office) return 'not permitted';
        this.initial_statement_date = Date.now();
    }


    /* Set Lapse clause */

    /*
     |  Clause: Set Lapse.
     |  The Filing Office may fix the Lapse Date.
     */

    set_lapse(caller, lapse_date)  {
        if(this.check_termination()) return undefined;
        if(caller != this.filing_office) return 'not permitted';
        this.lapse_date = lapse_date;
    }


    /* Set Continuation Start clause */

    /*
     |  Clause: Set Continuation Start.
     |  The Filing Office may fix the Continuation Window Start.
     */

    set_continuation_start(caller, continuation_window_start)  {
        if(this.check_termination()) return undefined;
        if(caller != this.filing_office) return 'not permitted';
        this.continuation_window_start = continuation_window_start;
    }


    /* Pay Fee clause */

    /*
     |  Clause: Pay Fee.
     |  The Secured Party may pay a Reminder Fee into escrow.
     */

    pay_fee(caller, reminder_fee)  {
        if(this.check_termination()) return undefined;
        if(caller != this.secured_party) return 'not permitted';
        this.reminder_fee = reminder_fee;
        this.transfer(this.secured_party, 'escrow', this.reminder_fee);
    }


    /* Notice clause */

    /*
     |  Clause: Notice.
     |  The Filing Office may fix the Notification Statement.
     */

    notice(caller, notification_statement)  {
        if(this.check_termination()) return undefined;
        if(caller != this.filing_office) return 'not permitted';
        this.notification_statement = notification_statement;
    }


    /* Notify clause */

    /*
     |  Clause: Notify.
     |  The Filing Office may, if the Continuation Window Start has passed, send the Notification Statement to the Secured Party.
     */

    notify_(caller)  {
        if(this.check_termination()) return undefined;
        if(caller != this.filing_office) return 'not permitted';
        if(this.continuation_window_start <= Date.now()) {
            this.notify(this.filing_office, this.secured_party, this.notification_statement);
        }
    }


    /* Pay Escrow In clause */

    /*
     |  Clause: Pay Escrow In.
     |  The Debtor may pay the Digital Asset Collateral into escrow.
     */

    pay_escrow_in(caller, digital_asset_collateral)  {
        if(this.check_termination()) return undefined;
        if(caller != this.debtor) return 'not permitted';
        this.digital_asset_collateral = digital_asset_collateral;
        this.transfer(this.debtor, 'escrow', this.digital_asset_collateral);
    }


    /* Fail to Pay clause */

    /*
     |  Clause: Fail to Pay.
     |  The Secured Party may declare Default.
     */

    fail_to_pay(caller)  {
        if(this.check_termination()) return undefined;
        if(caller != this.secured_party) return 'not permitted';
        this.default_ = true;
    }


    /* Take Possession clause */

    /*
     |  Clause: Take Possession.
     |  The Filing Office may, if Default is declared, pay the Digital Asset Collateral to the Secured Party.
     */

    take_possession(caller)  {
        if(this.check_termination()) return undefined;
        if(caller != this.filing_office) return 'not permitted';
        if(this.default_) {
            this.transfer(this.filing_office, this.secured_party, this.digital_asset_collateral);
        }
    }


    /* File Continuation clause */

    /*
     |  Clause: File Continuation.
     |  The Secured Party may file the Continuation Statement.
     */

    file_continuation(caller, continuation_statement)  {
        if(this.check_termination()) return undefined;
        if(caller != this.secured_party) return 'not permitted';
        this.continuation_statement = continuation_statement;
    }


    /* Set Continuation Lapse clause */

    /*
     |  Clause: Set Continuation Lapse.
     |  The Filing Office may, if the Continuation Statement is filed, fix the Continuation Statement Date.
     */

    set_continuation_lapse(caller, continuation_statement_date)  {
        if(this.check_termination()) return undefined;
        if(caller != this.filing_office) return 'not permitted';
        if(this.continuation_statement) {
            this.continuation_statement_date = continuation_statement_date;
        }
    }


    /* File Termination clause */

    /*
     |  Clause: File Termination.
     |  The Secured Party may file a Termination Statement, and certify the Termination Statement Time as the then current time.
     */

    file_termination(caller, termination_statement)  {
        if(this.check_termination()) return undefined;
        if(caller != this.secured_party) return 'not permitted';
        this.termination_statement = termination_statement;
        this.termination_statement_time = Date.now();
    }


    /* Release Escrow clause */

    /*
     |  Clause: Release Escrow.
     |  The Filing Office may, if the Termination Statement is filed, return the Digital Asset Collateral to the Debtor.
     */

    release_escrow(caller)  {
        if(this.check_termination()) return undefined;
        if(caller != this.filing_office) return 'not permitted';
        if(this.termination_statement) {
            this.transfer(this.filing_office, this.debtor, this.digital_asset_collateral);
        }
    }


    /* Release Reminder Fee clause */

    /*
     |  Clause: Release Reminder Fee.
     |  The Filing Office may, if the Termination Statement is filed, return the Reminder Fee to the Secured Party.
     */

    release_reminder_fee(caller)  {
        if(this.check_termination()) return undefined;
        if(caller != this.filing_office) return 'not permitted';
        if(this.termination_statement) {
            this.transfer(this.filing_office, this.secured_party, this.reminder_fee);
        }
    }


    /* Termination Period clause */

    /*
     |  Clause: Termination Period.
     |  "Termination Period" is defined as 365 days after the Termination Statement Time.
     */

    termination_period()  {
        return (this.termination_statement_time + (365 * 86400000));
    }


    /* Terminate and Clear clause */

    /*
     |  Clause: Terminate and Clear.
     |  The Filing Office may, if the Termination Period has passed, terminate this contract.
     */

    terminate_and_clear(caller)  {
        if(this.check_termination()) return undefined;
        if(caller != this.filing_office) return 'not permitted';
        if(this.termination_period() <= Date.now()) {
            this.termination();
        }
    }

    /* built-in transfer message */

    transfer(from, to, amount) {
        console.log(`➠ system message: transfer ${amount} from ${from} to ${to}.`);
        if(from == 'escrow') this._escrow -= amount;
        if(to == 'escrow') this._escrow += amount;
    }

    /* built-in send message */

    notify(from, to, message) {
        console.log(`➠ system message: send message «${message}» from ${from} to ${to}.`);
    }


    /* built-in termination of the contract system */

    termination() {
        this.terminated = true;
    }


    check_termination() {
        if(!this.terminated) return false;
        return true;
    }
}

/* end */
