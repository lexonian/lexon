/** Lexon-generated Javascript 
 **
 **	code:        Evaluation License System
 **
 **	preamble:    This is a licensing contract for a software evaluation.
 **
 **	authors:     FLORIAN IDELBERGER, HENNING DIEDRICH
 **
 **	file:        evaluation.lex
 **
 **	code tagged: 0.2.1
 **
 **	compiler:    lexon 0.3 beta 2
 **
 **	grammar:     0.2.20 / subset 0.3.9 beta 1 - English / Reyes
 **
 **	backend:     javascript 0.3.102 beta 2
 **
 **	target:      node 14.1+
 **
 **	options:     --javascript  --harden  --comment 
 **
 */

/**
 **
 **	Main Evaluation License System contract system
 **
 **/

/*
 | 	LEX: Evaluation License System.
 | 	LEXON: 0.2.1
 | 	AUTHORS: FLORIAN IDELBERGER, HENNING DIEDRICH
 | 	PREAMBLE: This is a licensing contract for a software evaluation.
 | 
 | 	TERMS:
 | 
 | 	"Licensor" is a person.
 | 	"Arbiter" is a person.
 | 	"Licensing Fee" is an amount.
 | 	"Breach Fee" is an amount.
 | 
 | 	The Licensor appoints the Arbiter,
 | 	fixes the Licensing Fee,
 | 	and fixes the Breach Fee.
 */

module.exports = class EvaluationLicenseSystem {

    /* This classes constructor's is the only scope where the covenant classes exist. 
       This can hide them in larger contexts but requires constructor indirections. */
    constructor(licensor, arbiter, licensing_fee, breach_fee) {

        let main = this;
        this._escrow = 0;
        this.licensor = licensor;
        this.arbiter = arbiter;
        this.licensing_fee = licensing_fee;
        this.breach_fee = breach_fee;

        /* aggregation of covenants for folds and serialization */

        this._license_list = {};
        this._license_count = 0;

        /**
         **
         **	License covenant class
         **
         **/

        /*
	 | 	TERMS PER License
	 | 
	 | 	"Description of Goods" is a text.
	 | 	"Licensee" is a person.
	 | 	"Paid" is a binary.
	 | 	"Commissioned" is a binary.
	 | 	"Comment Text" is a text.
	 | 	"Published" is a binary.
	 | 	"Permission to Comment" is a binary.
	 | 	"Notice Time" is a time.
	 | 	"License" is this contract.
	 | 
	 | 	The Licensor appoints the Licensee, and fixes the Description of Goods.
	 */

        /* this closure exports the covenant's constructor to the scope of the main */

        this.License = (caller, licensee, description_of_goods) => {
            if(caller == main.licensor) {
                return new License(this, caller, licensee, description_of_goods);
            }
        };

        class License {

            constructor(caller, licensee, description_of_goods) {
                this.description_of_goods = description_of_goods;
                this.licensee = licensee;
                this.paid = null;
                this.commissioned = null;
                this.comment_text = null;
                this.published = null;
                this.permission_to_comment = null;
                this.notice_time = null;
                this.terminated = false;
            }


            /* Pay clause */

            /*
             |  CLAUSE: Pay.
             |  The Licensee pays the Licensing Fee to the Licensor,
             |  and pays the Breach Fee into escrow.
             |  This License is therefore Paid.
             */

            pay(caller)  {
                if(this.check_termination()) return undefined;
                if(!(caller == this.licensee)) return 'not permitted';
                if(caller == this.licensee) {
                    main.transfer(this.licensee, main.licensor, main.licensing_fee);
                    main.transfer(this.licensee, 'escrow', main.breach_fee);
                }
                this.paid = true;
            }


            /* Commission clause */

            /*
             |  CLAUSE: Commission.
             |  The Licensor may certify this License as Commissioned.
             */

            commission(caller)  {
                if(this.check_termination()) return undefined;
                if(caller != main.licensor) return 'not permitted';
                this.commissioned = true;
            }


            /* Comment clause */

            /*
             |  CLAUSE: Comment.
             |  The Licensee may register a Comment Text.
             */

            comment(caller, comment_text)  {
                if(this.check_termination()) return undefined;
                if(caller != this.licensee) return 'not permitted';
                this.comment_text = comment_text;
            }


            /* Publication clause */

            /*
             |  CLAUSE: Publication.
             |  The Licensee may certify this License as Published.
             */

            publication(caller)  {
                if(this.check_termination()) return undefined;
                if(caller != this.licensee) return 'not permitted';
                this.published = true;
            }


            /* Grant Permission to Comment clause */

            /*
             |  CLAUSE: Grant Permission to Comment.
             |  The Licensee may grant the Permission to Comment.
             */

            grant_permission_to_comment(caller)  {
                if(this.check_termination()) return undefined;
                if(caller != this.licensee) return 'not permitted';
                this.permission_to_comment = true;
            }


            /* Declare Breach clause */

            /*
             |  CLAUSE: Declare Breach.
             |  The Arbiter may, if this License is Factually Breached:
             |  pay the Breach Fee to the Licensor,
             |  and afterwards terminate this License.
             */

            declare_breach(caller)  {
                if(this.check_termination()) return undefined;
                if(caller != main.arbiter) return 'not permitted';
                if(this.factually_breached()) {
                    main.transfer(main.arbiter, main.licensor, main.breach_fee);
                    this.termination();
                }
            }


            /* Factually Breached clause */

            /*
             |  CLAUSE: Factually Breached.
             |  "Factually Breached" is defined as:
             |  this License is Commissioned and the Comment Text is not fixed,
             |  or this License is Published and there is no Permission to Comment and the Notice Time lies at least 24 hours in the past.
             */

            factually_breached()  {
                return ((this.commissioned && !this.comment_text)
                         || (this.published && (!this.permission_to_comment && (this.notice_time <= (Date.now() - (24 * 3600000))))));
            }


            /* Notice clause */

            /*
             |  CLAUSE: Notice.
             |  The Licensor or the Arbiter may fix the Notice Time as the respective current time.
             */

            notice(caller)  {
                if(this.check_termination()) return undefined;
                if(!(caller == main.arbiter || caller == main.licensor)) return 'not permitted';
                this.notice_time = Date.now();
            }


            /* Noticed clause */

            /*
             |  CLAUSE: Noticed.
             |  "Noticed" is defined as a Notice Time being fixed.
             */

            noticed()  {
                return this.notice_time;
            }

            /* built-in transfer message */

            transfer(from, to, amount) {
                console.log(`âž  system message: transfer ${amount} from ${from} to ${to}.`);
                if(from == 'escrow') main._escrow -= amount;
                if(to == 'escrow') main._escrow += amount;
            }


            /* built-in termination of the covenant */

            termination() {
                this.terminated = true;
            }


            check_termination() {
                if(!this.terminated) return false;
                return true;
            }
        }
    }

    /* create new instance of License covenant, and register it with main */

    add_license(caller, licensee, description_of_goods) {
        return this._license_list[this._license_count += 1] = this.License(caller, licensee, description_of_goods);
    }

}

/* end */
