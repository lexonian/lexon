// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

/** Lexon-generated Solidity code

 **
 **	code:        Escrow
 **
 **	file:        escrow.lex
 **
 **	compiler:    lexon 0.3 alpha 97 U
 **
 **	grammar:     0.2.20 / subset 0.3.8.2 alpha 97 - English / Reyes
 **
 **	backend:     solidity 0.3.97f U
 **
 **	target:      solidity 0.8+
 **
 **	options:     --solidity  --comment 
 **
 */

/**
 **
 **	Main Escrow contract system
 **
 **/

/*
 | 	LEX Escrow.
 | 
 | 	"Payer" is a person.
 | 	"Payee" is a person.
 | 	"Arbiter" is a person.
 | 	"Fee" is an amount.
 | 
 | 	The Payer pays an amount into escrow, appoints the Payee, appoints the Arbiter, and fixes the Fee.
 */

contract Escrow {

    address payable payer;
    address payable payee;
    address payable arbiter;
    uint fee;

    constructor(address payable _payee, address payable _arbiter, uint _fee) payable {
        payer = payable(msg.sender);
        payee = _payee;
        arbiter = _arbiter;
        fee = _fee;
    }

    /* built-in safe transfer */

    function transfer(address _to, uint _amount) internal {
        (bool _success, ) = _to.call{value:_amount}("");
        require(_success, "transfer failed on receiver side");
    }

    /* built-in caller assertion */

    function permit(address _authorized) internal view {
        require(msg.sender == _authorized, "not permitted");
    }


    /* Pay Out clause */

    /*
     |  CLAUSE: Pay Out.
     *  The Arbiter may pay from escrow the Fee to themselves, and afterwards pay the remainder of the escrow to the Payee.
     */

    function pay_out() public {
        permit(arbiter);
        transfer(arbiter, fee);
        transfer(payee, address(this).balance);
    }


    /* Pay Back clause */

    /*
     |  CLAUSE: Pay Back.
     *  The Arbiter may pay from escrow the Fee to themselves, and afterwards return the remainder of the escrow to the Payer.
     */

    function pay_back() public {
        permit(arbiter);
        transfer(arbiter, fee);
        transfer(payer, address(this).balance);
    }
}

/* end */
