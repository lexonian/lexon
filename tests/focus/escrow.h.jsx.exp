/** Lexon-generated Javascript 
 **
 **	code:        Escrow
 **
 **	file:        escrow.lex
 **
 **	compiler:    lexon 0.3 alpha 98 U
 **
 **	grammar:     0.2.20 / subset 0.3.8.3 alpha 98 - English / Reyes
 **
 **	backend:     javascript 0.3.98c U
 **
 **	target:      node 14.1+
 **
 **	options:     --javascript  --harden  --comment 
 **
 */

/**
 **
 **	Main Escrow contract system
 **
 **/

/*
 | 	LEX Escrow.
 | 
 | 	"Payer" is a person.
 | 	"Payee" is a person.
 | 	"Arbiter" is a person.
 | 	"Fee" is an amount.
 | 
 | 	The Payer pays an amount into escrow, appoints the Payee, appoints the Arbiter, and fixes the Fee.
 */

module.exports = class Escrow {

    constructor(payer, amount, payee, arbiter, fee) {

        this._escrow = 0;
        this.payer = payer;
        this.payee = payee;
        this.arbiter = arbiter;
        this.fee = fee;
        this.transfer(this.payer, 'escrow', amount);
    }



    /* Pay Out clause */

    /*
     |  CLAUSE: Pay Out.
     |  The Arbiter may pay from escrow the Fee to themselves, and afterwards pay the remainder of the escrow to the Payee.
     */

    pay_out(caller)  {
        if(caller != this.arbiter) return 'not permitted';
        this.transfer('escrow', this.arbiter, this.fee);
        this.transfer('escrow', this.payee, this._escrow);
    }


    /* Pay Back clause */

    /*
     |  CLAUSE: Pay Back.
     |  The Arbiter may pay from escrow the Fee to themselves, and afterwards return the remainder of the escrow to the Payer.
     */

    pay_back(caller)  {
        if(caller != this.arbiter) return 'not permitted';
        this.transfer('escrow', this.arbiter, this.fee);
        this.transfer('escrow', this.payer, this._escrow);
    }

    /* built-in transfer message */

    transfer(from, to, amount) {
        console.log(`âž  system message: transfer ${amount} from ${from} to ${to}.`);
        if(from == 'escrow') this._escrow -= amount;
        if(to == 'escrow') this._escrow += amount;
    }
}

/* end */
