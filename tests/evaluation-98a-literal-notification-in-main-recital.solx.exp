// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

/** Lexon-generated Solidity code
 **
 **	code:        Evaluation License System
 **
 **	preamble:    This is a licensing contract for a software evaluation.
 **
 **	authors:     FLORIAN IDELBERGER, HENNING DIEDRICH
 **
 **	file:        cover/evaluation-98a-literal-notification-in-main-recital.lex
 **
 **	code tagged: 0.2.1
 **
 **	compiler:    lexon 0.3 alpha 98 U
 **
 **	grammar:     0.2.20 / subset 0.3.8.3 alpha 98 - English / Reyes
 **
 **	backend:     solidity 0.3.98a U
 **
 **	target:      solidity 0.8.17+
 **
 **	options:     --solidity  --all-auxiliaries 
 **


   INSTRUCTIONS FOR USE:

   Deploy this smart contract to the Ethereum blockchain or Goerli testchain.  Replace
   the <parameters> with literal values to interact with the contract via terminal.

   Note that the instructions below reflect your lexon code, as well as the parameters
   used during compilation of the code: different functions and parameters will result
   from different input.  Some functions are 'built-in' but only appear when needed as
   per compiler options used during compilation  –  a list of which, is available with
   lexon -h.  The functions are given in the order of appearance, in the lexon source.

   The required caller is noted in double angle brackets << >>.  Some functions can be
   called by anyone.  Note that roles are being defined by using an address for it for
   the first time. This will require for the same address to be used for the same role
   after this point. Else, the call will revert.

   Some clauses of the original lexon source text do not appear in the comments below.
   Namely, those without permission phrase, wherefore they are regarded as internal.

   These are the constructor parameters for deployment:

   <arbiter : address payable>, <licensing_fee : uint>, <breach_fee : uint>

   These are the state progress functions that allow to interact with the contract:

   • <<Licensor>> ⟶   test()
   • <<Licensor>> ⟶   foo(<breach_fee : uint>)

   The following are actions that can be performed per License.

   > license = evaluation.add_license(<licensee : address payable>, <description_of_goods : string>)
   • <<Licensee>> ⟶   pay()
   • <<Licensor>> ⟶   commission()
   • <<Licensee>> ⟶   comment(<comment_text : string>)
   • <<Licensee>> ⟶   publication()
   • <<Licensee>> ⟶   grant_permission_to_comment()
   • <<Arbiter>> ⟶   declare_breach()
   • anyone ⟶   factually_breached()
   • <<Arbiter or Licensor>> ⟶   notice()
   • anyone ⟶   noticed()
 */

/**
 **
 **	Main Evaluation License System contract system
 **
 **/

/*
 | 	LEX: Evaluation License System.
 | 	LEXON: 0.2.1
 | 	AUTHORS: FLORIAN IDELBERGER, HENNING DIEDRICH
 | 	PREAMBLE: This is a licensing contract for a software evaluation.
 | 
 | 	TERMS:
 | 
 | 	"Licensor" is a person.
 | 	"Arbiter" is a person.
 | 	"Licensing Fee" is an amount.
 | 	"Breach Fee" is an amount.
 | 
 | 	The Licensor appoints the Arbiter,
 | 	fixes the Licensing Fee,
 | 	fixes the Breach Fee,
 | 	and notifies the Arbiter of the ‹Commencement of Operations›.
 */

contract EvaluationLicenseSystem {

    address payable public licensor;
    address payable public arbiter;
    uint public licensing_fee;
    uint public breach_fee;
    bool terminated = false;

    event Message(
        address indexed _from,
        address indexed _to,
        string _message);

    constructor(address payable _arbiter, uint _licensing_fee, uint _breach_fee) {
        licensor = payable(msg.sender);
        arbiter = _arbiter;
        licensing_fee = _licensing_fee;
        breach_fee = _breach_fee;
        notify(arbiter, "Commencement of Operations");
    }

    /* aggregation of covenants for folds and serialization */

    mapping(uint => License) public _license_list;
    uint _license_count = 0;

    /* create new instance of License covenant, and register it with main */

    function add_license(address payable _licensee, string memory _description_of_goods) public returns(License) {
        check_termination();
        return _license_list[_license_count += 1] = new License(this, _licensee, _description_of_goods);
    }

    /* built-in caller assertion */

    function permit(address payable _authorized) internal view {
        require(msg.sender == _authorized, "not permitted");
    }

    /* built-in safe transfer */

    function transfer(address payable _to, uint _amount) internal {
        (bool _success, ) = _to.call{value:_amount}("");
        require(_success, "transfer failed on receiver side");
    }

    /* built-in send message */

    function notify(address payable _to, string memory _message) internal {
        emit Message(msg.sender, _to, _message);
    }


    /* built-in termination of the contract system */

    function termination() internal {
        terminated = true;
    }

    function check_termination() internal view {
        require(!terminated, "contract system terminated before");
    }


    /* Test clause */

    /*
     |  CLAUSE: Test.
     |  THe Licensor may terminate this contract.
     */

    function test() public {
        check_termination();
        permit(licensor);
        termination();
    }


    /* Foo clause */

    /*
     |  CLAUSE: Foo.
     |  The Licensor may fix the Breach Fee, and notify the Arbiter of the ‹Changed Fee›.
     */

    function foo(uint _breach_fee) public {
        check_termination();
        permit(licensor);
        breach_fee = _breach_fee;
        notify(arbiter, "Changed Fee");
    }
}

/**
 **
 **	License covenant class
 **
 **/

/*
 | 	TERMS PER License
 | 
 | 	"Description of Goods" is a text.
 | 	"Licensee" is a person.
 | 	"Paid" is a binary.
 | 	"Commissioned" is a binary.
 | 	"Comment Text" is a text.
 | 	"Published" is a binary.
 | 	"Permission to Comment" is a binary.
 | 	"Notice Time" is a time.
 | 	"License" is this contract.
 | 
 | 	The Licensor appoints the Licensee, and fixes the Description of Goods.
 */

contract License {

    EvaluationLicenseSystem main;
    string public description_of_goods;
    address payable public licensee;
    bool public paid;
    bool public commissioned;
    string public comment_text;
    bool public published;
    bool public permission_to_comment;
    uint public notice_time;


    constructor(EvaluationLicenseSystem _main, address payable _licensee, string memory _description_of_goods) {
        main = _main;
        licensee = _licensee;
        description_of_goods = _description_of_goods;
    }


    /* Pay clause */

    /*
     |  CLAUSE: Pay.
     |  The Licensee pays the Licensing Fee to the Licensor,
     |  and pays the Breach Fee into escrow.
     |  This License is therefore Paid.
     */

    function pay() public {
        require(msg.sender == licensee, "not permitted");
        if(msg.sender == licensee) {
            transfer(main.licensor(), main.licensing_fee());
        }
        paid = true;
    }


    /* Commission clause */

    /*
     |  CLAUSE: Commission.
     |  The Licensor may certify this License as Commissioned.
     */

    function commission() public {
        permit(main.licensor());
        commissioned = true;
    }


    /* Comment clause */

    /*
     |  CLAUSE: Comment.
     |  The Licensee may register a Comment Text.
     */

    function comment(string memory _comment_text) public {
        permit(licensee);
        comment_text = _comment_text;
    }


    /* Publication clause */

    /*
     |  CLAUSE: Publication.
     |  The Licensee may certify this License as Published.
     */

    function publication() public {
        permit(licensee);
        published = true;
    }


    /* Grant Permission to Comment clause */

    /*
     |  CLAUSE: Grant Permission to Comment.
     |  The Licensee may grant the Permission to Comment.
     */

    function grant_permission_to_comment() public {
        permit(licensee);
        permission_to_comment = true;
    }


    /* Declare Breach clause */

    /*
     |  CLAUSE: Declare Breach.
     |  The Arbiter may, if this License is Factually Breached:
     |  pay the Breach Fee to the Licensor.
     */

    function declare_breach() public {
        permit(main.arbiter());
        if(factually_breached()) {
            transfer(main.licensor(), main.breach_fee());
        }
    }


    /* Factually Breached clause */

    /*
     |  CLAUSE: Factually Breached.
     |  "Factually Breached" is defined as:
     |  this License is Commissioned and the Comment Text is not fixed,
     |  or this License is Published and there is no Permission to Comment and the Notice Time lies at least 24 hours in the past.
     */

    function factually_breached() public view returns(bool) {
        return ((commissioned && bytes(comment_text).length == 0)
                 || (published && (!permission_to_comment && (notice_time <= (block.timestamp - (24 * 3600))))));
    }


    /* Notice clause */

    /*
     |  CLAUSE: Notice.
     |  The Licensor or the Arbiter may fix the Notice Time as the respective current time.
     */

    function notice() public {
        require(msg.sender == main.arbiter() || msg.sender == main.licensor(), "not permitted");
        notice_time = block.timestamp;
    }


    /* Noticed clause */

    /*
     |  CLAUSE: Noticed.
     |  "Noticed" is defined as a Notice Time being fixed.
     */

    function noticed() public view returns(bool) {
        return notice_time != 0;
    }

    /* built-in caller assertion */

    function permit(address payable _authorized) internal view {
        require(msg.sender == _authorized, "not permitted");
    }

    /* built-in safe transfer */

    function transfer(address payable _to, uint _amount) internal {
        (bool _success, ) = _to.call{value:_amount}("");
        require(_success, "transfer failed on receiver side");
    }
}

/* end */
