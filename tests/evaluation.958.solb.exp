// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

contract EvaluationLicenseSystem {

    address payable public licensor;
    address payable public agent;
    uint public licensing_fee;
    uint public breach_fee;

    constructor(address payable _agent, uint _licensing_fee, uint _breach_fee) {
        licensor = payable(msg.sender);
        agent = _agent;
        licensing_fee = _licensing_fee;
        breach_fee = _breach_fee;
    }


    mapping(uint => License) public _license_list;
    uint _license_count = 0;


    function add_license(address payable _licensee, string memory _description_of_goods) public returns(License) {
        return _license_list[_license_count += 1] = new License(this, _licensee, _description_of_goods);
    }
}

contract License {

    EvaluationLicenseSystem main;
    string public description_of_goods;
    address payable public licensee;
    bool public paid;
    bool public commissioned;
    string public comment_text;
    bool public published;
    bool public permission_to_comment;
    uint public notice_time;
    bool terminated = false;


    constructor(EvaluationLicenseSystem _main, address payable _licensee, string memory _description_of_goods) {
        main = _main;
        licensee = _licensee;
        description_of_goods = _description_of_goods;
    }


    function pay() public {
        check_termination();
        require(msg.sender == licensee, "not permitted");
        if(msg.sender == licensee) {
            transfer(main.licensor(), main.licensing_fee());
        }
        paid = true;
    }


    function commission() public {
        check_termination();
        permit(main.licensor());
        commissioned = true;
    }


    function comment(string memory _comment_text) public {
        check_termination();
        permit(licensee);
        comment_text = _comment_text;
    }


    function publication() public {
        check_termination();
        permit(licensee);
        published = true;
    }


    function grant_permission_to_comment() public {
        check_termination();
        permit(licensee);
        permission_to_comment = true;
    }


    function declare_breach() public {
        check_termination();
        permit(main.agent());
        if(factually_breached()) {
            transfer(main.licensor(), main.breach_fee());
            termination();
        }
    }


    function factually_breached() public view returns(bool) {
        return ((commissioned && bytes(comment_text).length == 0)
                 || (published && (!permission_to_comment && (notice_time <= (block.timestamp - (24 * 3600))))));
    }


    function notice() public {
        check_termination();
        require(msg.sender == main.agent() || msg.sender == main.licensor(), "not permitted");
        notice_time = block.timestamp;
    }


    function noticed() public view returns(bool) {
        return notice_time != 0;
    }


    function permit(address payable _authorized) internal view {
        require(msg.sender == _authorized, "not permitted");
    }


    function transfer(address payable _to, uint _amount) internal {
        (bool _success, ) = _to.call{value:_amount}("");
        require(_success, "transfer failed on receiver side");
    }


    function termination() internal {
        terminated = true;
    }

    function check_termination() internal view {
        require(!terminated, "covenant terminated before");
    }
}