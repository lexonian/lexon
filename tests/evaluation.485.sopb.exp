

@compiler >=6

main contract EvaluationLicenseSystem =

    record state = {
            licensor : address,
            agent : address,
            licensing_service_fee : int,
            breach_service_fee : int
        }

    entrypoint init(agent : address, licensing_service_fee : int, breach_service_fee : int) = {
            licensor = Call.caller,
            agent = agent,
            licensing_service_fee = licensing_service_fee,
            breach_service_fee = breach_service_fee
        }



    stateful function transfer(to : address, amount : int) =
        Chain.spend(to, amount)


this._license_list = {};
this._license_count = 0;

contract License =

    record state = {
        description_of_goods : string,
        license_taker : address,
        paid : bool,
        commissioned : bool,
        comment_text : string,
        published : bool,
        permission_to_comment : bool,
        notice_time : int,
            terminated : bool
        }

    entrypoint init(license_taker : address, description_of_goods : string) = {
        description_of_goods = description_of_goods,
        license_taker = license_taker,
        paid = false,
        commissioned = false,
        comment_text = "",
        published = false,
        permission_to_comment = false,
        notice_time = 0,
            terminated = false
        }


    stateful entrypoint pay() =
        check_termination()
        require(Call.caller == license_taker, "not permitted")
        if(Call.caller == license_taker)
            transfer(state.licensor, state.licensing_service_fee)
        paid = true;


    stateful entrypoint commission() =
        check_termination()
        permit(state.licensor)
        put(state{commissioned = true})


    stateful entrypoint comment(comment_text : string) =
        check_termination()
        permit(license_taker)
        put(state{comment_text = comment_text})


    stateful entrypoint publication() =
        check_termination()
        permit(license_taker)
        put(state{published = true})


    stateful entrypoint grant_permission_to_comment() =
        check_termination()
        permit(license_taker)
        put(state{permission_to_comment = true})


    stateful entrypoint declare_breach() =
        check_termination()
        permit(state.agent)
        if(factually_breached())
            transfer(state.licensor, state.breach_service_fee)
            termination()


    entrypoint factually_breached() =
        ((commissioned && comment_text == "")
                 || (published && (!permission_to_comment && (notice_time =< (Chain.timestamp - (24 * 3600000))))))


    stateful entrypoint notice() =
        check_termination()
        require(Call.caller == state.agent || Call.caller == state.licensor, "not permitted")
        put(state{notice_time = Chain.timestamp})


    entrypoint noticed() =
        notice_time != 0


    function permit(authorized : address) =
        require(Call.caller == authorized, "access")


    stateful function transfer(to : address, amount : int) =
        Chain.spend(to, amount)


    stateful function termination() =
        put(state{terminated = true})

    function check_termination() =
        require(!state.terminated, "covenant terminated before")