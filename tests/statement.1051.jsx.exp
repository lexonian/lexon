/** Lexon-generated Javascript 
 **
 **	code:        UCC Financing Statement
 **
 **	file:        lexon/statement.1051.lex
 **
 **	code tagged: 0.2.12
 **
 **	compiler:    lexon 0.3 alpha 98 U
 **
 **	grammar:     0.2.20 / subset 0.3.8.3 alpha 98 - English / Reyes
 **
 **	backend:     javascript 0.3.98c U
 **
 **	target:      node 14.1+
 **
 **	options:     --javascript  --all-auxiliaries 
 **


   INSTRUCTIONS FOR USE:

   Execute this program using node. Replace the <parameters> with literal values.

   Running this program as-is requires beginners programmer knowledge. This phase is
   yet not covered by lexon's mission to make code readable and useful for non-coders.
   In the future, an interface will be generated to complete this last mile. However,
   embedding this code into a self-explanatory user interface is a straight forward
   task for a full-stack programmer.

   Note that the instructions below reflect your lexon code as well as the parameters
   used during compilation of the code: different functions and parameters will result
   from different input. Some functions are 'built-in' but only appear when needed as
   per compiled-in features – a list of which is available with lexon -h. The functions
   are not given in a specific order of execution but as listed in the lexon source.

   These node modules have to be installed once:

   $ npm install serialize-javascript
   $ npm install tar
   $ npm install nodemailer
   $ npm install prompt-sync

   Parameters below are marked with double angle brackets << >> for the respective
   required caller. If the role is defined earlier, it can only be performed by this
   person. (But remember that this entire setup is trustful: anyone can manipulate
   anything about this contract. Though they cannot sign it or change the signed log.)
   If the role is not defined earlier, the call makes the role be assigned to the
   person named for the call. Some functions can be called without naming a caller.
   Some clauses of the original lexon source will not appear below. Namely, those
   that have no permission phrase, wherefore they are regarded as internal.

   The main contract system is initialized by loading the module and instantiating:

   $ node
   > contract = require("./lexon/statement.1051.jsx");
   > statement = new contract(<<filer>>, <filing_office>, <debtor>, <secured_party>, <collateral>);

   Remember to reset node's module cache each time you edit and recompile your code:

   > delete require.cache[require.resolve('./lexon/statement.1051.jsx')];

   These are the state progress functions that allow to interact with the contract:

   > statement.certify(<<filing_office>>, <file_number>)
   > statement.set_file_date(<<filing_office>>)
   > statement.set_lapse(<<filing_office>>, <lapse_date>)
   > statement.set_continuation_start(<<filing_office>>, <continuation_window_start>)
   > statement.pay_service_fee(<<secured_party>>, <reminder_service_fee>)
   > statement.notice(<<filing_office>>, <notification_statement>)
   > statement.notify_(<<filing_office>>)
   > statement.pay_escrow_in(<<debtor>>, <digital_asset_collateral>)
   > statement.fail_to_pay(<<secured_party>>)
   > statement.take_possession(<<filing_office>>)
   > statement.file_continuation(<<secured_party>>, <continuation_statement>)
   > statement.set_continuation_lapse(<<filing_office>>, <continuation_statement_date>)
   > statement.file_termination(<<secured_party>>, <termination_statement>)
   > statement.release_escrow(<<filing_office>>)
   > statement.release_reminder_service_fee(<<filing_office>>)
   > statement.termination_period()
   > statement.terminate_and_clear(<<filing_office>>)

   state changes of the contract can be listed, e.g. actions performed by
   a party to it, or agents who are assigned privileges. In case hash chains
   or signatures are used, they are visible in this log. The log is stored in
   in the file 'log'.

   > statement.history()

   The complete contract state can be saved to disk and re-loaded at a
   later point in time. This serves to continue work after stopping and
   restarting node; or to send the entire contract system and its current
   state - which can include hashes and signatures - to another party,
   who may perform the next steps.

   > statement.persist()
   > statement.load()

   The contract code, state and log can be bundled into one file to exchange
   or archive it:

   > statement.bundle()
   > statement.unbundle()

   The contract code, state and log can be sent to a counterparty. This
   requires configuring an email account in the file 'config'.

   > statement.send()

   Keys for signing log entries are expected on-file, by default named after
   the actor, with the extension .key. For demo purposes, key files can be
   created using this utility function:

   > statement.create_key(name, passphrase)
 */

var fs = require('fs');
var crypto = require('crypto');
var serialize = require('serialize-javascript');
var prompt = require('prompt-sync')();
var tar = require('tar');
var nodemailer = require('nodemailer');
var last_caller;
var last_passphrase;

/**
 **
 **	Main UCC Financing Statement contract system
 **
 **/

/*
 | 	LEX UCC Financing Statement
 | 
 | 	
 | 	LEXON: 0.2.12
 | 
 | 	"Financing Statement" is this contract. 
 | 	"File Number" is data
 | 
 | 	"Initial Statement Date" is a time
 | 
 | 	"Filer" is a person. 
 | 	"Debtor" is a person
 | 
 | 	"Secured Party" is a person
 | 
 | 	"Filing Office" is a person
 | 
 | 	"Collateral" is data
 | 
 | 	"Digital Asset Collateral" is an amount
 | 
 | 	"Reminder Service Fee" is an amount
 | 
 | 	"Continuation Window Start" is a time
 | 
 | 	"Continuation Statement Date" is a time
 | 
 | 	"Continuation Statement Filing Number" is data
 | 
 | 	"Lapse Date" is a time
 | 
 | 	"Default" is a binary
 | 
 | 	"Continuation Statement" is a binary
 | 
 | 	"Termination Statement" is a binary
 | 
 | 	"Termination Statement Time" is a time
 | 
 | 	"Notification Statement" is a text. 
 | 
 | 	The Filer fixes the Filing Office, fixes the Debtor, fixes the Secured Party, and fixes the Collateral
 */

module.exports = class UCCFinancingStatement {

    constructor(filer, filing_office, debtor, secured_party, collateral) {


        /* object members: skip for restoring serialized object */
        if(typeof filer !== 'undefined') {
            this._escrow = 0;
            this.file_number = null;
            this.initial_statement_date = null;
            this.filer = filer;
            this.debtor = debtor;
            this.secured_party = secured_party;
            this.filing_office = filing_office;
            this.collateral = collateral;
            this.digital_asset_collateral = null;
            this.reminder_service_fee = null;
            this.continuation_window_start = null;
            this.continuation_statement_date = null;
            this.continuation_statement_filing_number = null;
            this.lapse_date = null;
            this.default_ = null;
            this.continuation_statement = null;
            this.termination_statement = null;
            this.termination_statement_time = null;
            this.notification_statement = null;
        this.terminated = false;
            this.logname = 'log';

            /* start log - overwrites previous by same name */

            fs.writeFileSync(this.logname, "Lexon log " + (new Date).toLocaleString('en-US') + "\n", ()=>{});
            this.log(filer, "✓ Filing Office fixed");
            this.log(filer, "✓ Debtor fixed");
            this.log(filer, "✓ Secured Party fixed");
            this.log(filer, "✓ Collateral fixed");
        }

        /* restore object from file - must be below class definition */

        if(typeof filer === 'undefined') {
            console.log("> restore from file 'state'");
            let data = fs.readFileSync('state', ()=>{});
            let live = eval('(' + data + ')');
            Object.assign(this, live);
        }
    }



    /* Certify clause */

    /*
     |  Clause: Certify
     |  
     |  The Filing Office may certify the File Number
     */

    certify(caller, file_number)  {
        if(this.check_termination()) return undefined;
        if(caller != this.filing_office) return 'not permitted';
        this.file_number = file_number;
        this.log(caller, "✓ File Number certified");
        return 'done.';
    }


    /* Set File Date clause */

    /*
     |  Clause: Set File Date
     |  
     |  The Filing Office may fix the Initial Statement Date as the current time.
     */

    set_file_date(caller)  {
        if(this.check_termination()) return undefined;
        if(caller != this.filing_office) return 'not permitted';
        this.initial_statement_date = Date.now();
        this.log(caller, "✓ Initial Statement Date fixed");
        return 'done.';
    }


    /* Set Lapse clause */

    /*
     |  Clause: Set Lapse
     |  
     |  The Filing Office may fix the Lapse Date
     */

    set_lapse(caller, lapse_date)  {
        if(this.check_termination()) return undefined;
        if(caller != this.filing_office) return 'not permitted';
        this.lapse_date = lapse_date;
        this.log(caller, "✓ Lapse Date fixed");
        return 'done.';
    }


    /* Set Continuation Start clause */

    /*
     |  Clause: Set Continuation Start
     |  
     |  The Filing Office may fix the Continuation Window Start
     */

    set_continuation_start(caller, continuation_window_start)  {
        if(this.check_termination()) return undefined;
        if(caller != this.filing_office) return 'not permitted';
        this.continuation_window_start = continuation_window_start;
        this.log(caller, "✓ Continuation Window Start fixed");
        return 'done.';
    }


    /* Pay Service Fee clause */

    /*
     |  Clause: Pay Service Fee
     |  
     |  The Secured Party may pay a Reminder Service Fee into escrow.
     */

    pay_service_fee(caller, reminder_service_fee)  {
        if(this.check_termination()) return undefined;
        if(caller != this.secured_party) return 'not permitted';
        this.reminder_service_fee = reminder_service_fee;
        this.transfer(caller, this.secured_party, 'escrow', this.reminder_service_fee);
        return 'done.';
    }


    /* Notice clause */

    /*
     |  Clause: Notice
     |  
     |  The Filing Office may fix the Notification Statement
     */

    notice(caller, notification_statement)  {
        if(this.check_termination()) return undefined;
        if(caller != this.filing_office) return 'not permitted';
        this.notification_statement = notification_statement;
        this.log(caller, "✓ Notification Statement fixed");
        return 'done.';
    }


    /* Notify clause */

    /*
     |  Clause: Notify
     |  
     |  The Filing Office may, given that the Continuation Window Start has passed, send the Notification Statement to the Secured Party
     */

    notify_(caller)  {
        if(this.check_termination()) return undefined;
        if(caller != this.filing_office) return 'not permitted';
        if(this.continuation_window_start <= Date.now()) {
            this.notify(caller, this.filing_office, this.secured_party, this.notification_statement);
        }
        return 'done.';
    }


    /* Pay Escrow In clause */

    /*
     |  Clause: Pay Escrow In
     |  
     |  The Debtor may pay the Digital Asset Collateral into escrow
     */

    pay_escrow_in(caller, digital_asset_collateral)  {
        if(this.check_termination()) return undefined;
        if(caller != this.debtor) return 'not permitted';
        this.digital_asset_collateral = digital_asset_collateral;
        this.transfer(caller, this.debtor, 'escrow', this.digital_asset_collateral);
        return 'done.';
    }


    /* Fail to Pay clause */

    /*
     |  Clause: Fail to Pay
     |  
     |  The Secured Party may declare Default
     */

    fail_to_pay(caller)  {
        if(this.check_termination()) return undefined;
        if(caller != this.secured_party) return 'not permitted';
        this.default_ = true;
        this.log(caller, "✓ Default declared");
        return 'done.';
    }


    /* Take Possession clause */

    /*
     |  Clause: Take Possession
     |  
     |  The Filing Office may, given that Default is declared, pay the Digital Asset Collateral to the Secured Party
     */

    take_possession(caller)  {
        if(this.check_termination()) return undefined;
        if(caller != this.filing_office) return 'not permitted';
        if(this.default_) {
            this.transfer(caller, this.filing_office, this.secured_party, this.digital_asset_collateral);
        }
        return 'done.';
    }


    /* File Continuation clause */

    /*
     |  Clause: File Continuation
     |  
     |  The Secured Party may file the Continuation Statement
     */

    file_continuation(caller, continuation_statement)  {
        if(this.check_termination()) return undefined;
        if(caller != this.secured_party) return 'not permitted';
        this.continuation_statement = continuation_statement;
        this.log(caller, "✓ Continuation Statement filed");
        return 'done.';
    }


    /* Set Continuation Lapse clause */

    /*
     |  Clause: Set Continuation Lapse
     |  
     |  The Filing Office may, given that the Continuation Statement is filed, fix the Continuation Statement Date
     */

    set_continuation_lapse(caller, continuation_statement_date)  {
        if(this.check_termination()) return undefined;
        if(caller != this.filing_office) return 'not permitted';
        if(this.continuation_statement) {
            this.continuation_statement_date = continuation_statement_date;
            this.log(caller, "✓ Continuation Statement Date fixed");
        }
        return 'done.';
    }


    /* File Termination clause */

    /*
     |  Clause: File Termination
     |  
     |  The Secured Party may file a Termination Statement, and certify the Termination Statement Time as the then current time
     */

    file_termination(caller, termination_statement)  {
        if(this.check_termination()) return undefined;
        if(caller != this.secured_party) return 'not permitted';
        this.termination_statement = termination_statement;
        this.log(caller, "✓ Termination Statement filed");
        this.termination_statement_time = Date.now();
        this.log(caller, "✓ Termination Statement Time certified");
        return 'done.';
    }


    /* Release Escrow clause */

    /*
     |  Clause: Release Escrow
     |  
     |  The Filing Office may, given that the Termination Statement is filed, return the Digital Asset Collateral to the Debtor
     */

    release_escrow(caller)  {
        if(this.check_termination()) return undefined;
        if(caller != this.filing_office) return 'not permitted';
        if(this.termination_statement) {
            this.transfer(caller, this.filing_office, this.debtor, this.digital_asset_collateral);
        }
        return 'done.';
    }


    /* Release Reminder Service Fee clause */

    /*
     |  Clause: Release Reminder Service Fee
     |  
     |  The Filing Office may, given that the Termination Statement is filed, return the Reminder Service Fee to the Secured Party
     */

    release_reminder_service_fee(caller)  {
        if(this.check_termination()) return undefined;
        if(caller != this.filing_office) return 'not permitted';
        if(this.termination_statement) {
            this.transfer(caller, this.filing_office, this.secured_party, this.reminder_service_fee);
        }
        return 'done.';
    }


    /* Termination Period clause */

    /*
     |  Clause: Termination Period
     |  
     |  "Termination Period" is defined as 365 days after the Termination Statement Time
     */

    termination_period()  {
        return (this.termination_statement_time + (365 * 86400000));
    }


    /* Terminate and Clear clause */

    /*
     |  Clause: Terminate and Clear
     |  
     |  The Filing Office may, given that the Termination Period has passed, terminate this contract
     */

    terminate_and_clear(caller)  {
        if(this.check_termination()) return undefined;
        if(caller != this.filing_office) return 'not permitted';
        if(this.termination_period() <= Date.now()) {
            this.termination(caller);
        }
        return 'done.';
    }

    /* built-in transfer message */

    transfer(caller, from, to, amount) {
        this.log(caller, `➠ system message: transfer ${amount} from ${from} to ${to}.`);
        if(from == 'escrow') this._escrow -= amount;
        if(to == 'escrow') this._escrow += amount;
    }

    /* built-in send message */

    notify(caller, from, to, message) {
        this.log(caller, `➠ system message: send message «${message}» from ${from} to ${to}.`);
    }


    /* built-in termination of the contract system */

    termination(caller) {
        this.terminated = true;
            this.log(caller, '■ contract system terminated');
    }

    check_termination() {
        if(!this.terminated) return false;
            console.log('✕ contract system previously terminated');
        return true;
    }

    /* built-in convenience function to view state change log. */

    history() {
        fs.readFile(this.logname, (e,d)=>{console.log(d.toString())});
    }

    /* built-in serialization and storage of entire contract system state. */

    persist() {
        console.log('> persisting');
        var data = serialize(this, {space: 4});
        fs.writeFileSync('state', data, ()=>{});
    }

    /* re-instate entire contract system from serialized file store */

    static load() {
        return new UCCFinancingStatement();
    }

    /* built-in tar-balling of code, log and state. */

    bundle() {
        console.log('> bundling into contract.tgz');
        tar.create({gzip:true, file:'contract.tgz'}, ['lexon/statement.1051.lex', 'lexon/statement.1051.jsx', 'state', 'log', 'INSTRUCTIONS.TXT']);
    }

    /* built-in untar-balling of code, log and state. */

    static unbundle() {
        console.log('> unbundling contract.tgz');
        tar.extract('contract.tgz');
    }

    /* built-in email sending of code, log and state. */

    send() {

        this.persist();
        this.bundle();

        console.log('> sending via email');
        var receiver = prompt('enter receiver address: ');

        var config = fs.readFileSync('config', ()=>{});
        var email = eval('(' + config + ')').email;
        console.log(email);

        var transporter = nodemailer.createTransport({
            service: email.service,
            auth: { user: email.user, pass: email.pass }});

        var mailOptions = {
            from: email.from,
            to: receiver,
            subject: email.subject,
            text: email.text,
            attachments: { path: './contract.tgz', contentType: 'application/gzip' }};

        transporter.sendMail(mailOptions, function(error, info){
            if (error) {
                console.log(error);
            } else {
                console.log('> email sent: ' + info.response); }});
    }

    /* built-in logging of state changes. */

    log(caller, msg) {
        console.log(msg);
        let stamp = (new Date()).toLocaleString('en-US');
        var entry = `⌽  ${stamp} ✦ ${caller} ${msg}`;
        var passphrase = this.sync_passphrase(caller);
        var pem = fs.readFileSync(caller + '.key');
        var key = pem.toString('ascii');
        var sign = crypto.createSign('RSA-SHA256');
        sign.update(entry);
        var sig = sign.sign({ key: key, passphrase: passphrase }, 'hex');
        fs.appendFileSync(this.logname, `${entry} ❈ ${sig}\n`);
        let pay = fs.readFileSync(this.logname);
        let hash = crypto.createHash('sha256').update(pay);
        fs.appendFileSync(this.logname, '⧉ ' + hash.digest('hex').substr(0, 12) + " ");
    }

    /* built-in password query for private key file, with cache. */

    sync_passphrase(caller) {
        if(!caller) process.exit('no caller information');
        if(caller == last_caller) return last_passphrase;
        last_caller = caller;
        return last_passphrase = prompt('enter pass phrase for ' + caller + ': ', {echo: ''});
    }

    /* built-in convenience function to create keys for users. */

    static create_key(name, passphrase) {
        const { publicKey, privateKey } =
            crypto.generateKeyPairSync('rsa',
                { modulusLength: 2048,
                    publicKeyEncoding: { type: 'spki', format: 'pem' },
                    privateKeyEncoding: { type: 'pkcs8', format: 'pem', cipher: 'aes-256-cbc', passphrase: passphrase }});

        fs.writeFileSync(name+'.key', privateKey);
        fs.writeFileSync(name+'.pub', publicKey);
        return true;
    }
}

/* end */
