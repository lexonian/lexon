// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

/* Lexon-generated Solidity code


   code:        Evaluation License System

   preamble:    This is a licensing contract for a software evaluation.

   authors:     FLORIAN IDELBERGER, HENNING DIEDRICH

   file:        lexon/evaluation.521.lex

   code tagged: 0.2.1

   compiler:    lexon 0.3 alpha 97 U

   grammar:     0.2.20 / subset 0.3.8.2 alpha 97 - English / Reyes

   backend:     solidity 0.3.97b U

   target:      solidity 0.8+

   parameters:  --solidity  --all-auxiliaries 


   INSTRUCTIONS FOR USE:

   Deploy this smart contract to the Ethereum blockchain or Goerli testchain.  Replace
   the <parameters> with literal values to interact with the contract via terminal.

   Note that the instructions below reflect your lexon code, as well as the parameters
   used during compilation of the code: different functions and parameters will result
   from different input.  Some functions are 'built-in' but only appear when needed as
   per compiler options used during compilation  –  a list of which, is available with
   lexon -h.  The functions are given in the order of appearance, in the lexon source.

   The required caller is noted in double angle brackets << >>.  Some functions can be
   called by anyone.  Note that roles are being defined by using an address for it for
   the first time. This will require for the same address to be used for the same role
   after this point. Else, the call will revert.

   Some clauses of the original lexon source text do not appear in the comments below.
   Namely, those without permission phrase, wherefore they are regarded as internal.

   These are the constructor parameters for deployment:

   <agent : address payable>, <licensing_fee : uint>, <breach_fee : uint>

   These are the state progress functions that allow to interact with the contract:


   The following are actions that can be performed per License.

   > license = evaluation.add_license(<license_taker : address payable>, <description_of_goods : string>)
   • <<License Taker>> ⟶  pay()
   • <<Licensor>> ⟶  commission()
   • <<License Taker>> ⟶  comment(<comment_text : string>)
   • <<License Taker>> ⟶  publication()
   • <<License Taker>> ⟶  grant_permission_to_comment()
   • <<Agent>> ⟶  declare_breach()
   • <<Agent or Licensor>> ⟶  factually_breached()
   • <<Agent or Licensor>> ⟶  notice()
   • %26%noticed()
*/

/**
 **
 ** Main Evaluation License System contract system
 **
 **/

/** LEX: Evaluation License System.
 *	LEXON: 0.2.1
 *	AUTHORS: FLORIAN IDELBERGER, HENNING DIEDRICH
 *	PREAMBLE: This is a licensing contract for a software evaluation.
 *
 *	TERMS:
 *
 *	"Licensor" is a person.
 *	"Agent" is a person.
 *	"Licensing Fee" is an amount.
 *	"Breach Fee" is an amount.
 *
 *	The Licensor appoints the Agent,
 *	fixes the Licensing Fee,
 *	and fixes the Breach Fee.
 *
 *	TERMS PER License:
 *
 *	"Description of Goods" is a text.
 *	"License Taker" is a person.
 *	"Paid" is a binary.
 *	"Commissioned" is a binary.
 *	"Comment Text" is a text.
 *	"Published" is a binary.
 *	"Permission to Comment" is a binary.
 *	"Notice Time" is a time.
 *	"License" is this contract.
 *
 *	The Licensor appoints the License Taker, and fixes the Description of Goods.
**/

contract EvaluationLicenseSystem {

    address payable licensor;
    address payable agent;
    uint licensing_fee;
    uint breach_fee;

    constructor(address payable _agent, uint _licensing_fee, uint _breach_fee) {
        licensor = payable(msg.sender);
        agent = _agent;
        licensing_fee = _licensing_fee;
        breach_fee = _breach_fee;
    }

    /* aggregation of covenants for folds and serialization */

    mapping(uint => contract) public _license_list;
    uint _license_count = 0;

    /* create new instance of License covenant, and register it with main */

    function add_license(address payable _license_taker, string memory _description_of_goods) returns(License) {
        check_termination();
        return _license_list[_license_count += 1] = new License(_license_taker, _description_of_goods);
    }

    /* built-in safe transfer */

    function transfer(address _to, uint _amount) internal {
        (bool _success, ) = _to.call{value:_amount}("");
        require(_success, "transfer failed on receiver side");
    }

    /* built-in caller assertion */

    function permit(address _authorized) internal view {
        require(msg.sender == _authorized, "not permitted");
    }
}

/**
 ** License covenant class
 **/

contract License {
    constructor(address payable _license_taker, string memory _description_of_goods) {
        license_taker = _license_taker;
        description_of_goods = _description_of_goods;
    }


    /* Pay clause */

    /*
     *  CLAUSE: Pay.
     *  The License Taker pays the Licensing Fee to the Licensor,
     *  and pays the Breach Fee into escrow.
     *  This License is therefore Paid.
     */

    function pay() public {
        check_termination();
        if(msg.sender == license_taker) {
            transfer(licensor, licensing_fee);
        } else {
            revert("not permitted");
        }
        paid = true;
    }


    /* Commission clause */

    /*
     *  CLAUSE: Commission.
     *  The Licensor may certify this License as Commissioned.
     */

    function commission() public {
        check_termination();
        permit(licensor);
        commissioned = true;
    }


    /* Comment clause */

    /*
     *  CLAUSE: Comment.
     *  The License Taker may register a Comment Text.
     */

    function comment(string memory _comment_text) public {
        check_termination();
        permit(license_taker);
        comment_text = _comment_text;
    }


    /* Publication clause */

    /*
     *  CLAUSE: Publication.
     *  The License Taker may certify this License as Published.
     */

    function publication() public {
        check_termination();
        permit(license_taker);
        published = true;
    }


    /* Grant Permission to Comment clause */

    /*
     *  CLAUSE: Grant Permission to Comment.
     *  The License Taker may grant the Permission to Comment.
     */

    function grant_permission_to_comment() public {
        check_termination();
        permit(license_taker);
        permission_to_comment = true;
    }


    /* Declare Breach clause */

    /*
     *  CLAUSE: Declare Breach.
     *  The Agent may, given that this License is Factually Breached:
     *  pay the Breach Fee to the Licensor,
     *  and afterwards terminate this License.
     */

    function declare_breach() public {
        check_termination();
        permit(agent);
        if(factually_breached()) {
            transfer(licensor, breach_fee);
            termination();
        }
    }


    /* Factually Breached clause */

    /*
     *  CLAUSE: Factually Breached.
     *  "Factually Breached" is defined as:
     *  this License is Commissioned and the Comment Text is not fixed,
     *  or this License is Published and there is no Permission to Comment and the Notice Time lies at least 24 hours in the past.
     */

    function factually_breached() public view returns(bool) {
        return ((commissioned && comment_text == "")
                 || (published && (!permission_to_comment && (notice_time <= (block.timestamp - (24 * 3600))))));
    }


    /* Notice clause */

    /*
     *  CLAUSE: Notice.
     *  The Licensor or the Agent may fix the Notice Time as the respective current time.
     */

    function notice() public {
        check_termination();
        require(msg.sender == agent || msg.sender == licensor, "not permitted");
        notice_time = block.timestamp;
    }


    /* Noticed clause */

    /*
     *  CLAUSE: Noticed.
     *  "Noticed" is defined as a Notice Time being fixed.
     */

    function noticed() public view returns(bool) {
        return notice_time != 0;
    }


    /* built-in termination of this covenant */

    function termination() internal {
        terminated = true;
    }

    function already_terminated() internal view returns(bool) {
        if(!terminated) return false;
        return true;
    }
}

/* end */
