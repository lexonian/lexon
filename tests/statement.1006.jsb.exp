module.exports = class UCCFinancingStatement {

    constructor(filer, filing_office, debtor, secured_party, collateral) {

        let main = this;
        this._escrow = 0;
        this.file_number = null;
        this.initial_statement_date = null;
        this.filer = filer;
        this.debtor = debtor;
        this.secured_party = secured_party;
        this.filing_office = filing_office;
        this.collateral = collateral;
        this.digital_asset_collateral = null;
        this.reminder_fee = null;
        this.continuation_window_start = null;
        this.continuation_statement_date = null;
        this.continuation_statement_filing_number = null;
        this.lapse_date = null;
        this.default_ = null;
        this.continuation_statement = null;
        this.termination_statement = null;
        this.termination_statement_time = null;
        this.notification_statement = null;
        this.terminated = false;
    }



    certify(caller, file_number)  {
        if(this.already_terminated()) return undefined;
        if(caller == this.filing_office) {
            this.file_number = file_number;
        } else {
            return 'not permitted.';
        }
    }


    set_file_date(caller)  {
        if(this.already_terminated()) return undefined;
        if(caller == this.filing_office) {
            this.initial_statement_date = Date.now();
        } else {
            return 'not permitted.';
        }
    }


    set_lapse(caller, lapse_date)  {
        if(this.already_terminated()) return undefined;
        if(caller == this.filing_office) {
            this.lapse_date = lapse_date;
        } else {
            return 'not permitted.';
        }
    }


    set_continuation_start(caller, continuation_window_start)  {
        if(this.already_terminated()) return undefined;
        if(caller == this.filing_office) {
            this.continuation_window_start = continuation_window_start;
        } else {
            return 'not permitted.';
        }
    }


    pay_fee(caller, reminder_fee)  {
        if(this.already_terminated()) return undefined;
        if(caller == this.secured_party) {
            this.reminder_fee = reminder_fee;
            this._pay(this.secured_party, 'escrow', this.reminder_fee);
        } else {
            return 'not permitted.';
        }
    }


    notice(caller, notification_statement)  {
        if(this.already_terminated()) return undefined;
        if(caller == this.filing_office) {
            this.notification_statement = notification_statement;
        } else {
            return 'not permitted.';
        }
    }


    notify(caller)  {
        if(this.already_terminated()) return undefined;
        if(caller == this.filing_office) {
            if(this.continuation_window_start <= Date.now()) {
                this._send(this.filing_office, this.secured_party, this.notification_statement);
            }
        } else {
            return 'not permitted.';
        }
    }


    pay_escrow_in(caller, digital_asset_collateral)  {
        if(this.already_terminated()) return undefined;
        if(caller == this.debtor) {
            this.digital_asset_collateral = digital_asset_collateral;
            this._pay(this.debtor, 'escrow', this.digital_asset_collateral);
        } else {
            return 'not permitted.';
        }
    }


    fail_to_pay(caller)  {
        if(this.already_terminated()) return undefined;
        if(caller == this.secured_party) {
            this.default_ = true;
        } else {
            return 'not permitted.';
        }
    }


    take_possession(caller)  {
        if(this.already_terminated()) return undefined;
        if(caller == this.filing_office) {
            if(this.default_) {
                this._pay(this.filing_office, this.secured_party, this.digital_asset_collateral);
            }
        } else {
            return 'not permitted.';
        }
    }


    file_continuation(caller, continuation_statement)  {
        if(this.already_terminated()) return undefined;
        if(caller == this.secured_party) {
            this.continuation_statement = continuation_statement;
        } else {
            return 'not permitted.';
        }
    }


    set_continuation_lapse(caller, continuation_statement_date)  {
        if(this.already_terminated()) return undefined;
        if(caller == this.filing_office) {
            if(this.continuation_statement) {
                this.continuation_statement_date = continuation_statement_date;
            }
        } else {
            return 'not permitted.';
        }
    }


    file_termination(caller, termination_statement)  {
        if(this.already_terminated()) return undefined;
        if(caller == this.secured_party) {
            this.termination_statement = termination_statement;
            this.termination_statement_time = Date.now();
        } else {
            return 'not permitted.';
        }
    }


    release_escrow(caller)  {
        if(this.already_terminated()) return undefined;
        if(caller == this.filing_office) {
            if(this.termination_statement) {
                this._pay(this.filing_office, this.debtor, this.digital_asset_collateral);
            }
        } else {
            return 'not permitted.';
        }
    }


    release_reminder_fee(caller)  {
        if(this.already_terminated()) return undefined;
        if(caller == this.filing_office) {
            if(this.termination_statement) {
                this._pay(this.filing_office, this.secured_party, this.reminder_fee);
            }
        } else {
            return 'not permitted.';
        }
    }


    termination_period()  {
        return (this.termination_statement_time + (365 * 86400000));
    }


    terminate_and_clear(caller)  {
        if(this.already_terminated()) return undefined;
        if(caller == this.filing_office) {
            if(this.termination_period() <= Date.now()) {
                this.termination();
            }
        } else {
            return 'not permitted.';
        }
    }


    termination() {
        this.terminated = true;
    }

    already_terminated() {
        if(!this.terminated) return false;
        return true;
    }


    _pay(from, to, amount) {
        console.log(`➠ system message: pay ${amount} from ${from} to ${to}.`);
        if(from == 'escrow') main._escrow -= amount;
        if(to == 'escrow') main._escrow += amount;
    }


    _send(from, to, message) {
        console.log(`➠ system message: send message «${message}» from ${from} to ${to}.`);
    }
}